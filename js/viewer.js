// Generated by CoffeeScript 1.7.1
(function() {
  var ColorMap, Component, Crosshairs, DataField, DataPanel, Image, Layer, LayerList, SelectComponent, SliderComponent, TextFieldComponent, Threshold, Transform, UserInterface, View, ViewSettings, Viewer, componentToHex, hexToRgb, rgbToHex,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  window.Viewer || (window.Viewer = {});

  var names = { 2: ['Arousal', 'Manipulation'], 
              3: ['Arousal', 'Manipulation', 'Language'], 
              4: ['Memory', 'Arousal', 'Vision', 'Hearing'], 
              5: ['Memory', 'Arousal', 'Manipulation', 'Vision', 'Hearing'], 
              6: ['Memory', 'Reward', 'Reaction Time', 'Manipulation', 'Vision', 'Hearing'], 
              7: ['Emotion', 'Reward', 'Cognitive', 'Manipulation', 'Vision', 'Hearing', 'Meaning'], 
              8: ['Memory', 'Episodic Memory', 'Arousal', 'Cognitive Process', 'Manipulation', 'Vision', 'Perception', 'Language'], 
              9: ['Memory', 'Reward', 'Anticipation', 'Cognitive Process', 'Manipulation', 'Vision', 'Word', 'Perception', 'Language'], 
              10: ['Memory', 'Reward', 'Arousal', 'Cognitive', 'Manipulation', 'Episodic Memory', 'Recall', 'Vision', 'Perception', 'Language'], 
              11: ['Memory', 'Episodic Memory', 'Emotion', 'Cognitive', 'Anticipation', 'Arousal', 'Manipulation', 'Vision', 'Hearing', 'Language', 'Cognitive Process'], 
              12: ['Memory', 'Episodic Memory', 'Valence', 'Reward', 'Anticipation', 'Emotion', 'Arousal', 'Cognition', 'Manipulation', 'Vision', 'Hearing', 'Language'], 
              13: ['Memory', 'Episodic Memory', 'Emotion', 'Decision Making', 'Reward', 'Arousal', 'Cognitive', 'Manipulation', 'Recall', 'Vision', 'Perception', 'Hearing', 'Language'], 
              14: ['Memory', 'Retrieval', 'Episodic Memory', 'Decision Making', 'Reward', 'Arousal', 'Salience', 'Cognitive', 'Manipulation', 'Hand', 'Vision', 'Perception', 'Language', 'Emotion'], 
              15: ['Memory', 'Episodic Memory', 'Recall', 'Retrieval', 'Valence', 'Reward', 'Anticipation', 'Emotion', 'Cognition', 'Arousal', 'Manipulation', 'Cognitive', 'Vision', 'Hearing', 'Language'], 
              16: ['Memory', 'Episodic Memory', 'Emotion', 'Retrieval', 'Reward', 'Anticipation', 'Arousal', 'Thought', 'Cognitive', 'Preparation', 'Vision', 'Recognition', 'Perception', 'Language', 'Word', 'Meaning'], 
              17: ['Memory', 'Episodic Memory', 'Retrieval', 'Recall', 'Recognition', 'Arousal', 'Anticipation', 'Reward', 'Emotion', 'Cognitive', 'Preparation', 'Vision', 'Familiarity', 'Hearing', 'Language', 'Meaning', 'Representation'], 
              18: ['Memory', 'Episodic Memory', 'Recall', 'Retrieval', 'Word', 'Emotion', 'Decision Making', 'Cognitive', 'Reward', 'Arousal', 'Cognitive Process', 'Manipulation', 'Execution', 'Vision', 'Hearing', 'Language', 'Speech', 'Meaning'], 
              19: ['Memory', 'Episodic Memory', 'Recall', 'Recognition', 'Fear', 'Reward', 'Reaction Time', 'Anticipation', 'Retrieval', 'Emotion', 'Arousal', 'Cognitive', 'Manipulation', 'Vision', 'Hearing', 'Language Processing', 'Speech', 'Language', 'Word'], 
              20: ['Memory', 'Episodic Memory', 'Familiarity', 'Retrieval', 'Recall', 'Encoding', 'Emotion', 'Reward', 'Anticipation', 'Arousal', 'Cognitive Process', 'Cognitive', 'Execution', 'Manipulation', 'Preparation', 'Thought', 'Vision', 'Hearing', 'Language', 'Meaning'], 
              21: ['Memory', 'Episodic Memory', 'Recall', 'Retrieval', 'Emotion', 'Reward', 'Decision Making', 'Anticipation', 'Salience', 'Arousal', 'Attention', 'Context', 'Cognitive', 'Manipulation', 'Execution', 'Motor Control', 'Vision', 'Hearing', 'Word', 'Language', 'Meaning'], 
              22: ['Memory', 'Episodic Memory', 'Recall', 'Remembering', 'Recognition', 'Retrieval', 'Feedback', 'Fear', 'Emotion', 'Reward', 'Decision Making', 'Anticipation', 'Arousal', 'Cognitive', 'Manipulation', 'Cognitive Process', 'Vision', 'Perception', 'Language', 'Hearing', 'Word', 'Meaning'], 
              23: ['Memory', 'Episodic Memory', 'Recall', 'Recognition', 'Familiarity', 'Encoding', 'Remembering', 'Retrieval', 'Fear', 'Reward', 'Decision Making', 'Anticipation', 'Arousal', 'Emotion', 'Cognitive', 'Preparation', 'Vision', 'Perception', 'Hearing', 'Language', 'Word', 'Meaning', 'Manipulation'], 
              24: ['Memory', 'Episodic Memory', 'Retrieval', 'Recall', 'Encoding', 'Recognition', 'Feedback', 'Pain', 'Emotion', 'Salience', 'Reward', 'Decision Making', 'Valence', 'Anticipation', 'Arousal', 'Reaction Time', 'Execution', 'Cognitive Process', 'Perception', 'Vision', 'Speech', 'Language', 'Manipulation', 'Word'], 
              25: ['Memory', 'Episodic Memory', 'Encoding', 'Retrieval', 'Familiarity', 'Recognition', 'Recall', 'Feedback', 'Fear', 'Emotion', 'Reward', 'Decision Making', 'Anticipation', 'Arousal', 'Cognitive', 'Manipulation', 'Vision', 'Preparation', 'Social Cognition', 'Perception', 'Language', 'Hearing', 'Language Processing', 'Meaning', 'Word']}


  /* VARIOUS HELPFUL FUNCTIONS */

  window.typeIsArray = Array.isArray || function(value) {
    return {}.toString.call(value) === '[object Array]';
  };

  Array.prototype.diff = function(a) {
    return this.filter(function(i) {
      return !(a.indexOf(i) > -1);
    });
  };

  window.Viewer = Viewer = (function() {
    Viewer.AXIAL = 2;

    Viewer.CORONAL = 1;

    Viewer.SAGITTAL = 0;

    Viewer.XAXIS = 0;

    Viewer.YAXIS = 1;

    Viewer.ZAXIS = 2;

    function Viewer(layerListId, layerSettingClass, cache, options) {
      var xyz;
      this.cache = cache != null ? cache : true;
      if (options == null) {
        options = {};
      }
      xyz = 'xyz' in options ? options.xyz : [0.0, 0.0, 0.0];
      this.coords_ijk = Transform.atlasToImage(xyz);
      this.coords_abc = Transform.atlasToViewer(xyz);
      this.viewSettings = new ViewSettings(options);
      this.views = [];
      this.sliders = {};
      this.dataPanel = new DataPanel(this);
      this.layerList = new LayerList();
      this.userInterface = new UserInterface(this, layerListId, layerSettingClass);
      if (this.cache && (typeof amplify !== "undefined" && amplify !== null)) {
        this.cache = amplify.store;
      }
    }

    Viewer.prototype.coords_xyz = function() {
      return Transform.imageToAtlas(this.coords_ijk);
    };

    Viewer.prototype.paint = function() {
      var l, v, _i, _j, _len, _len1, _ref, _ref1;
      $(this).trigger("beforePaint");
      if (this.layerList.activeLayer) {
        this.userInterface.updateThresholdSliders(this.layerList.activeLayer.image);
        this.updateDataDisplay();
      }
      _ref = this.views;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        v = _ref[_i];
        v.clear();
        // _ref1 = this.layerList.layers.slice(0).reverse();
        _ref1 = this.layerList.layers.slice(0);
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          l = _ref1[_j];
          if (l.visible) {
            v.paint(l);
          }
        }
        v.drawCrosshairs();
        v.drawLabels();
      }
      $(this).trigger("beforePaint");
      return true;
    };

    Viewer.prototype.clear = function() {
      var v, _i, _len, _ref, _results;
      _ref = this.views;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        v = _ref[_i];
        _results.push(v.clear());
      }
      return _results;
    };

    Viewer.prototype.resetCanvas = function() {
      var v, _i, _len, _ref, _results;
      _ref = this.views;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        v = _ref[_i];
        _results.push(v.resetCanvas());
      }
      return _results;
    };

    Viewer.prototype.addView = function(element, dim, index, labels) {
      if (labels == null) {
        labels = true;
      }
      return this.views.push(new View(this, this.viewSettings, element, dim, index, labels));
    };

    Viewer.prototype.addSlider = function(name, element, orientation, min, max, value, step, dim, textField) {
      var v, views, _i, _len, _results;
      if (dim == null) {
        dim = null;
      }
      if (textField == null) {
        textField = null;
      }
      if (name.match(/nav/)) {
        views = (function() {
          var _i, _len, _ref, _results;
          _ref = this.views;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            v = _ref[_i];
            if (v.dim === dim) {
              _results.push(v);
            }
          }
          return _results;
        }).call(this);
        _results = [];
        for (_i = 0, _len = views.length; _i < _len; _i++) {
          v = views[_i];
          _results.push(v.addSlider(name, element, orientation, min, max, value, step, textField));
        }
        return _results;
      } else {
        return this.userInterface.addSlider(name, element, orientation, min, max, value, step, textField);
      }
    };

    Viewer.prototype.addTextField = function(name, element) {
      return this.userInterface.addTextField(name, element);
    };

    Viewer.prototype.addDataField = function(name, element) {
      return this.dataPanel.addDataField(name, element);
    };

    Viewer.prototype.addAxisPositionField = function(name, element, dim) {
      return this.dataPanel.addAxisPositionField(name, element, dim);
    };

    Viewer.prototype.addColorSelect = function(element) {
      return this.userInterface.addColorSelect(element);
    };

    Viewer.prototype.addSignSelect = function(element) {
      return this.userInterface.addSignSelect(element);
    };

    Viewer.prototype.addSettingsCheckboxes = function(element, options) {
      var o, settings, _i, _len;
      if (options === 'standard') {
        options = ['crosshairs', 'panzoom', 'labels'];
      }
      settings = {};
      options = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = options.length; _i < _len; _i++) {
          o = options[_i];
          if (o === 'crosshairs' || o === 'panzoom' || o === 'labels') {
            _results.push(o);
          }
        }
        return _results;
      })();
      for (_i = 0, _len = options.length; _i < _len; _i++) {
        o = options[_i];
        settings[o] = this.viewSettings[o + 'Enabled'];
      }
      return this.userInterface.addSettingsCheckboxes(element, settings);
    };

    Viewer.prototype._loadImage = function(data, options) {
      var error, layer;
      layer = new Layer(new Image(data), options);
      this.layerList.addLayer(layer);
      try {
        if (this.cache && options.cache) {
          return amplify.store(layer.name, data);
        }
      } catch (_error) {
        error = _error;
        return "";
      }
    };

    Viewer.prototype._loadImageFromJSON = function(options) {
      return $.getJSON(options.url, (function(_this) {
        return function(data) {
          return _this._loadImage(data, options);
        };
      })(this));
    };

    Viewer.prototype._loadImageFromVolume = function(options) {
      var dfd, r, v;
      dfd = $.Deferred();
      $('body').append("<div id='xtk_tmp' style='display: none;'></div>");
      r = new X.renderer2D();
      r.container = 'xtk_tmp';
      r.orientation = 'X';
      r.init();
      r.interactor.config.KEYBOARD_ENABLED = false;
      r.interactor.config.MOUSECLICKS_ENABLED = false;
      r.interactor.config.MOUSEWHEEL_ENABLED = false;
      r.interactor.init();
      v = new X.volume();
      v.file = options.url += ['&ext=', '?'][+(options.url.indexOf('?') === -1)] + '.nii.gz';
      r.add(v);
      r.render();
      r.onShowtime = (function(_this) {
        return function() {
          var data;
          r.destroy();
          data = {
            data3d: v.image,
            dims: v.dimensions
          };
          _this._loadImage(data, options);
          $('#xtk_tmp').remove();
          return dfd.resolve('Finished loading from volume');
        };
      })(this);
      return dfd.promise();
    };

    Viewer.prototype.loadImages = function(images, activate, assignColors) {
      var ajaxReqs, data, existingLayers, img, _i, _len;
      if (activate == null) {
        activate = null;
      }
      if (assignColors == null) {
        assignColors = true;
      }

      /* Load one or more images. If activate is an integer, activate the layer at that 
      index. Otherwise activate the last layer in the list by default. When assignColors 
      is true, viewer will load each image with the next available color palette unless 
      color is explicitly specified.
       */
      if (!typeIsArray(images)) {
        images = [images];
      }
      ajaxReqs = [];
      existingLayers = this.layerList.getLayerNames();
      images = (function() {
        var _i, _len, _ref, _results;
        _results = [];
        for (_i = 0, _len = images.length; _i < _len; _i++) {
          img = images[_i];
          if (_ref = img.name, __indexOf.call(existingLayers, _ref) < 0) {
            _results.push(img);
          }
        }
        return _results;
      })();
      for (_i = 0, _len = images.length; _i < _len; _i++) {
        img = images[_i];
        if (assignColors && (img.colorPalette == null)) {
          img.colorPalette = this.layerList.getNextColor();
        }
        if ((data = img.data) || (this.cache && (data = this.cache(img.name)))) {
          this._loadImage(data, img);
        } else if (img.url.match(/\.json$/) || img.json) {
          ajaxReqs.push(this._loadImageFromJSON(img));
        } else {
          ajaxReqs.push(this._loadImageFromVolume(img));
        }
      }
      return $.when.apply($, ajaxReqs).then((function(_this) {
        return function() {
          var i, order;
          order = (function() {
            var _j, _len1, _results;
            _results = [];
            for (_j = 0, _len1 = images.length; _j < _len1; _j++) {
              i = images[_j];
              _results.push(i.name);
            }
            return _results;
          })();
          // _this.sortLayers(order.reverse());
          _this.sortLayers(order);
          _this.selectLayer(activate != null ? activate : activate = 0);
          _this.updateUserInterface();
          return $(_this).trigger('imagesLoaded');
        };
      })(this));
    };

    Viewer.prototype.clearImages = function() {
      this.layerList.clearLayers();
      this.updateUserInterface();
      this.clear();
      return $(this).trigger('imagesCleared');
    };

    Viewer.prototype.downloadImage = function(index) {
      var url;
      url = this.layerList.layers[index].download;
      if (url) {
        return window.location.replace(url);
      }
    };

    Viewer.prototype.selectLayer = function(index) {
      this.layerList.activateLayer(index);
      this.userInterface.updateLayerSelection(this.layerList.getActiveIndex());
      this.updateDataDisplay();
      this.userInterface.updateThresholdSliders(this.layerList.activeLayer.image);
      this.userInterface.updateComponents(this.layerList.activeLayer.getSettings());
      return $(this).trigger('layerSelected', this.layerList.activeLayer);
    };

    Viewer.prototype.deleteLayer = function(target) {
      this.layerList.deleteLayer(target);
      this.updateUserInterface();
      return $(this).trigger('layerDeleted');
    };

    Viewer.prototype.toggleLayer = function(index) {
      this.layerList.layers[index].toggle();
      this.userInterface.updateLayerVisibility(this.layerList.getLayerVisibilities());
      this.paint();
      return $(this).trigger('layerToggled');
    };

    Viewer.prototype.sortLayers = function(layers, paint) {
      if (paint == null) {
        paint = false;
      }
      this.layerList.sortLayers(layers);
      this.userInterface.updateLayerVisibility(this.layerList.getLayerVisibilities());
      if (paint) {
        return this.paint();
      }
    };

    Viewer.prototype.updateUserInterface = function() {
      this.userInterface.updateLayerList(this.layerList.layers, this.layerList.getActiveIndex());
      this.userInterface.updateLayerVisibility(this.layerList.getLayerVisibilities());
      this.userInterface.updateLayerSelection(this.layerList.getActiveIndex());
      if (this.layerList.activeLayer != null) {
        this.userInterface.updateComponents(this.layerList.activeLayer.getSettings());
      }
      return this.paint();
    };

    Viewer.prototype.updateSettings = function(settings) {
      this.layerList.updateActiveLayer(settings);
      return this.paint();
    };

    Viewer.prototype.updateDataDisplay = function() {
      var currentCoords, data;
      currentCoords = Transform.imageToAtlas(this.coords_ijk.slice(0)).join(', ');
      data = {
        voxelValue: this.getValue(),
        currentCoords: currentCoords
      };
      return this.dataPanel.update(data);
    };

    Viewer.prototype.updateViewSettings = function(options, paint) {
      if (paint == null) {
        paint = false;
      }
      this.viewSettings.updateSettings(options);
      if (paint) {
        return this.paint();
      }
    };

    Viewer.prototype.moveToViewerCoords = function(dim, cx, cy) {
      var cxyz;
      if (cy == null) {
        cy = null;
      }
      $(this).trigger('beforeLocationChange');
      cxyz = this.viewer2dTo3d(dim, cx, cy);
      this.coords_abc = cxyz;
      this.coords_ijk = Transform.atlasToImage(Transform.viewerToAtlas(this.coords_abc));
      this.paint();
      return $(this).trigger('afterLocationChange', {
        ijk: this.coords_ijk
      });
    };

    Viewer.prototype.moveToAtlasCoords = function(coords, paint) {
      if (paint == null) {
        paint = true;
      }
      this.coords_ijk = Transform.atlasToImage(coords);
      this.coords_abc = Transform.atlasToViewer(coords);
      if (paint) {
        return this.paint();
      }
    };

    Viewer.prototype.deleteView = function(index) {
      return this.views.splice(index, 1);
    };

    Viewer.prototype.jQueryInit = function() {
      return this.userInterface.jQueryInit();
    };

    Viewer.prototype.getValue = function(layer, coords, space, all) {
      var l, x, y, z, _ref;
      if (layer == null) {
        layer = null;
      }
      if (coords == null) {
        coords = null;
      }
      if (space == null) {
        space = 'viewer';
      }
      if (all == null) {
        all = false;
      }

      /* Get image value at a specific voxel. By default, returns the currently
      selected voxel for the currently active layer. Optionally, can pass a
      specific layer and/or coordinates (in viewer space) to use. If all is true,
      returns values for all layers as an array.
       */
      if (coords != null) {
        if (space === 'viewer') {
          coords = Transform.viewerToAtlas(coords);
        }
        if (space === 'viewer' || space === 'atlas') {
          coords = Transform.atlasToImage(coords);
        }
        x = coords[0], y = coords[1], z = coords[2];
      } else {
        _ref = this.coords_ijk, x = _ref[0], y = _ref[1], z = _ref[2];
      }
      if (all) {
        return (function() {
          var _i, _len, _ref1, _results;
          _ref1 = this.layerList.layers;
          _results = [];
          for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
            l = _ref1[_i];
            _results.push(l.image.data[z][y][x]);
          }
          return _results;
        }).call(this);
      }
      layer = layer != null ? this.layerList.layers[layer] : this.layerList.activeLayer;
      return layer.image.data[z][y][x];
    };

    Viewer.prototype.viewer2dTo3d = function(dim, cx, cy) {
      var cxyz;
      if (cy == null) {
        cy = null;
      }
      if (cy != null) {
        cxyz = [cx, cy];
        cxyz.splice(dim, 0, this.coords_abc[dim]);
      } else {
        cxyz = this.coords_abc;
        cxyz[dim] = cx;
      }
      return cxyz;
    };

    return Viewer;

  })();

  Image = (function() {
    function Image(data) {
      var i, j, k, p, value, vec, _i, _j, _k, _l, _len, _ref, _ref1, _ref2, _ref3, _ref4, _ref5;
      _ref = data.dims, this.x = _ref[0], this.y = _ref[1], this.z = _ref[2];
      if ('data3d' in data) {
        this.min = 0;
        this.max = 0;
        this.data = [];
        for (i = _i = 0, _ref1 = this.x; 0 <= _ref1 ? _i < _ref1 : _i > _ref1; i = 0 <= _ref1 ? ++_i : --_i) {
          this.data[i] = [];
          for (j = _j = 0, _ref2 = this.y; 0 <= _ref2 ? _j < _ref2 : _j > _ref2; j = 0 <= _ref2 ? ++_j : --_j) {
            this.data[i][j] = [];
            for (k = _k = 0, _ref3 = this.z; 0 <= _ref3 ? _k < _ref3 : _k > _ref3; k = 0 <= _ref3 ? ++_k : --_k) {
              value = Math.round(data.data3d[i][j][k] * 1000000) / 1000000; // Edited by Ellie from 100 to 1000000 to reduce rounding of PMI values
              if (value > this.max) {
                this.max = value;
              }
              if (value < this.min) {
                this.min = value;
              }
              this.data[i][j][k] = value;
            }
          }
        }
      } else if ('values' in data) {
        _ref4 = [data.max, data.min], this.max = _ref4[0], this.min = _ref4[1];
        vec = Transform.jsonToVector(data);
        this.data = Transform.vectorToVolume(vec, [this.x, this.y, this.z]);
      } else {
        this.min = 0;
        this.max = 0;
        this.data = this.empty();
      }
      if ('peaks' in data) {
        _ref5 = data.peaks;
        for (_l = 0, _len = _ref5.length; _l < _len; _l++) {
          p = _ref5[_l];
          this.addSphere(Transform.atlasToImage([p.x, p.y, p.z]), p.r != null ? p.r : p.r = 3, p.value != null ? p.value : p.value = 1);
        }
        this.max = 2;
      }
    }

    Image.prototype.empty = function() {
      var i, j, k, vol, _i, _j, _k, _ref, _ref1, _ref2;
      vol = [];
      for (i = _i = 0, _ref = this.x; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        vol[i] = [];
        for (j = _j = 0, _ref1 = this.y; 0 <= _ref1 ? _j < _ref1 : _j > _ref1; j = 0 <= _ref1 ? ++_j : --_j) {
          vol[i][j] = [];
          for (k = _k = 0, _ref2 = this.z; 0 <= _ref2 ? _k < _ref2 : _k > _ref2; k = 0 <= _ref2 ? ++_k : --_k) {
            vol[i][j][k] = 0;
          }
        }
      }
      return vol;
    };

    Image.prototype.addSphere = function(coords, r, value) {
      var dist, i, j, k, x, y, z, _i, _j, _k, _ref;
      if (value == null) {
        value = 1;
      }
      if (r <= 0) {
        return;
      }
      _ref = coords.reverse(), x = _ref[0], y = _ref[1], z = _ref[2];
      if (!((x != null) && (y != null) && (z != null))) {
        return;
      }
      for (i = _i = -r; -r <= r ? _i <= r : _i >= r; i = -r <= r ? ++_i : --_i) {
        if ((x - i) < 0 || (x + i) > (this.x - 1)) {
          continue;
        }
        for (j = _j = -r; -r <= r ? _j <= r : _j >= r; j = -r <= r ? ++_j : --_j) {
          if ((y - j) < 0 || (y + j) > (this.y - 1)) {
            continue;
          }
          for (k = _k = -r; -r <= r ? _k <= r : _k >= r; k = -r <= r ? ++_k : --_k) {
            if ((z - k) < 0 || (z + k) > (this.z - 1)) {
              continue;
            }
            dist = i * i + j * j + k * k;
            if (dist < r * r) {
              this.data[i + x][j + y][k + z] = value;
            }
          }
        }
      }
      return false;
    };

    Image.prototype.resample = function(newx, newy, newz) {};

    Image.prototype.slice = function(dim, index) {
      var i, j, slice, _i, _j, _k, _ref, _ref1, _ref2;
      switch (dim) {
        case 0:
          slice = [];
          for (i = _i = 0, _ref = this.x; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
            slice[i] = [];
            for (j = _j = 0, _ref1 = this.y; 0 <= _ref1 ? _j < _ref1 : _j > _ref1; j = 0 <= _ref1 ? ++_j : --_j) {
              slice[i][j] = this.data[i][j][index];
            }
          }
          break;
        case 1:
          slice = [];
          for (i = _k = 0, _ref2 = this.x; 0 <= _ref2 ? _k < _ref2 : _k > _ref2; i = 0 <= _ref2 ? ++_k : --_k) {
            slice[i] = this.data[i][index];
          }
          break;
        case 2:
          slice = this.data[index];
      }
      return slice;
    };

    Image.prototype.dims = function() {
      return [this.x, this.y, this.z];
    };

    return Image;

  })();

  Layer = (function() {
    function Layer(image, options) {
      this.image = image;
      options = $.extend(true, {
        colorPalette: 'red',
        sign: 'positive',
        visible: true,
        opacity: 1.0,
        cache: false,
        download: false,
        positiveThreshold: 0,
        negativeThreshold: 0,
        description: '',
        intent: 'Intensity'
      }, options);
      this.name = options.name;
      this.sign = options.sign;
      this.colorMap = this.setColorMap(options.colorPalette);
      this.visible = options.visible;
      this.threshold = this.setThreshold(options.negativeThreshold, options.positiveThreshold);
      this.opacity = options.opacity;
      this.download = options.download;
      this.intent = options.intent;
      this.description = options.description;
    }

    Layer.prototype.hide = function() {
      return this.visible = false;
    };

    Layer.prototype.show = function() {
      return this.visible = true;
    };

    Layer.prototype.toggle = function() {
      return this.visible = !this.visible;
    };

    Layer.prototype.slice = function(view, viewer) {
      var data;
      data = this.image.slice(view.dim, viewer.coords_ijk[view.dim]);
      data = this.threshold.mask(data);
      return data;
    };

    Layer.prototype.setColorMap = function(palette, steps) {
      var max, maxAbs, min;
      if (palette == null) {
        palette = null;
      }
      if (steps == null) {
        steps = null;
      }
      this.palette = palette;
      if (this.sign === 'both') {

        /* Instead of using the actual min/max range, we find the
        largest absolute value and use that as the bound for
        both signs. This preserves color maps where 0 is
        meaningful; e.g., for hot and cold, we want blues to
        be negative and reds to be positive even when
        abs(min) and abs(max) are quite different.
        BUT if min or max are 0, then implicitly fall back to
        treating mode as if it were 'positive' or 'negative'
         */
        maxAbs = Math.max(this.image.min, this.image.max);
        min = this.image.min === 0 ? 0 : -maxAbs;
        max = this.image.max === 0 ? 0 : maxAbs;
      } else {
        min = this.sign === 'positive' ? 0 : this.image.min;
        max = this.sign === 'negative' ? 0 : this.image.max;
      }
      return this.colorMap = new ColorMap(min, max, palette, steps);
    };

    Layer.prototype.setThreshold = function(negThresh, posThresh) {
      if (negThresh == null) {
        negThresh = 0;
      }
      if (posThresh == null) {
        posThresh = 0;
      }
      return this.threshold = new Threshold(negThresh, posThresh, this.sign);
    };

    Layer.prototype.update = function(settings) {
      var k, nt, pt, v;
      if ('sign' in settings) {
        this.sign = settings['sign'];
      }
      nt = 0;
      pt = 0;
      for (k in settings) {
        v = settings[k];
        switch (k) {
          case 'colorPalette':
            this.setColorMap(v);
            break;
          case 'opacity':
            this.opacity = v;
            break;
          case 'image-intent':
            this.intent = v;
            break;
          case 'pos-threshold':
            pt = v;
            break;
          case 'neg-threshold':
            nt = v;
            break;
          case 'description':
            this.description = v;
        }
      }
      return this.setThreshold(nt, pt, this.sign);
    };

    Layer.prototype.getSettings = function() {
      var nt, pt, settings;
      nt = this.threshold.negThresh;
      pt = this.threshold.posThresh;
      nt || (nt = 0.0);
      pt || (pt = 0.0);
      settings = {
        colorPalette: this.palette,
        sign: this.sign,
        opacity: this.opacity,
        'image-intent': this.intent,
        'pos-threshold': pt,
        'neg-threshold': nt,
        'description': this.description
      };
      return settings;
    };

    return Layer;

  })();

  LayerList = (function() {
    function LayerList() {
      this.clearLayers();
    }

    LayerList.prototype.addLayer = function(layer, activate) {
      if (activate == null) {
        activate = true;
      }
      this.layers.push(layer);
      if (activate) {
        return this.activateLayer(this.layers.length - 1);
      }
    };

    LayerList.prototype.deleteLayer = function(target) {
      var i, index, l, newInd;
      index = String(target).match(/^\d+$/) ? parseInt(target) : index = ((function() {
        var _i, _len, _ref, _results;
        _ref = this.layers;
        _results = [];
        for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
          l = _ref[i];
          if (l.name === target) {
            _results.push(i);
          }
        }
        return _results;
      }).call(this))[0];
      this.layers.splice(index, 1);
      if ((this.layers.length != null) && (this.activeLayer == null)) {
        newInd = index === 0 ? 1 : index - 1;
        return this.activateLayer(newInd);
      }
    };

    LayerList.prototype.clearLayers = function() {
      this.layers = [];
      return this.activeLayer = null;
    };

    LayerList.prototype.activateLayer = function(index) {
      return this.activeLayer = this.layers[index];
    };

    LayerList.prototype.updateActiveLayer = function(settings) {
      return this.activeLayer.update(settings);
    };

    LayerList.prototype.getLayerNames = function() {
      var l;
      return (function() {
        var _i, _len, _ref, _results;
        _ref = this.layers;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          l = _ref[_i];
          _results.push(l.name);
        }
        return _results;
      }).call(this);
    };

    LayerList.prototype.getLayerVisibilities = function() {
      var l;
      return (function() {
        var _i, _len, _ref, _results;
        _ref = this.layers;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          l = _ref[_i];
          _results.push(l.visible);
        }
        return _results;
      }).call(this);
    };

    LayerList.prototype.getActiveIndex = function() {
      return this.layers.indexOf(this.activeLayer);
    };

    LayerList.prototype.getNextColor = function() {
      var free, l, palettes, used;
      used = (function() {
        var _i, _len, _ref, _results;
        _ref = this.layers;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          l = _ref[_i];
          if (l.visible) {
            _results.push(l.palette);
          }
        }
        return _results;
      }).call(this);
      palettes = Object.keys(ColorMap.PALETTES);
      free = palettes.diff(used);
      if (free.length) {
        return free[0];
      } else {
        return palettes[Math.floor(Math.random() * palettes.length)];
      }
    };

    LayerList.prototype.sortLayers = function(newOrder, destroy, newOnTop) {
      var counter, i, l, n_layers, n_new, newLayers, ni, _i, _len, _ref;
      if (destroy == null) {
        destroy = false;
      }
      if (newOnTop == null) {
        newOnTop = true;
      }
      newLayers = [];
      counter = 0;
      n_layers = this.layers.length;
      n_new = newOrder.length;
      _ref = this.layers;
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        l = _ref[i];
        ni = newOrder.indexOf(l.name);
        if (ni < 0) {
          if (destroy) {
            continue;
          } else {
            ni = i;
            if (newOnTop) {
              ni += n_new;
            }
            counter += 1;
          }
        } else if (!(destroy || newOnTop)) {
          ni += counter;
        }
        newLayers[ni] = l;
      }
      return this.layers = newLayers;
    };

    return LayerList;

  })();

  Threshold = (function() {
    function Threshold(negThresh, posThresh, sign) {
      this.negThresh = negThresh;
      this.posThresh = posThresh;
      this.sign = sign != null ? sign : 'both';
    }

    Threshold.prototype.mask = function(data) {
      var i, res, _i, _ref;
      if (this.posThresh === 0 && this.negThresh === 0 && this.sign === 'both') {
        return data;
      }
      res = [];
      for (i = _i = 0, _ref = data.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        res[i] = data[i].map((function(_this) {
          return function(v) {
            if (((_this.negThresh < v && v < _this.posThresh)) || (v < 0 && _this.sign === 'positive') || (v > 0 && _this.sign === 'negative')) {
              return 0;
            } else {
              return v;
            }
          };
        })(this));
      }
      return res;
    };

    return Threshold;

  })();

  Transform = {
    jsonToVector: function(data) {
      var curr_inds, i, j, v, _i, _j, _k, _ref, _ref1, _ref2;
      v = new Array(data.dims[0] * data.dims[1] * data.dims[2]);
      for (i = _i = 0, _ref = v.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        v[i] = 0;
      }
      for (i = _j = 0, _ref1 = data.values.length; 0 <= _ref1 ? _j < _ref1 : _j > _ref1; i = 0 <= _ref1 ? ++_j : --_j) {
        curr_inds = data.indices[i];
        for (j = _k = 0, _ref2 = curr_inds.length; 0 <= _ref2 ? _k < _ref2 : _k > _ref2; j = 0 <= _ref2 ? ++_k : --_k) {
          v[curr_inds[j] - 1] = data.values[i];
        }
      }
      return v;
    },
    vectorToVolume: function(vec, dims) {
      var i, j, k, sliceSize, vol, x, y, z, _i, _j, _k, _l, _ref, _ref1, _ref2, _ref3;
      vol = [];
      for (i = _i = 0, _ref = dims[0]; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        vol[i] = [];
        for (j = _j = 0, _ref1 = dims[1]; 0 <= _ref1 ? _j < _ref1 : _j > _ref1; j = 0 <= _ref1 ? ++_j : --_j) {
          vol[i][j] = [];
          for (k = _k = 0, _ref2 = dims[2]; 0 <= _ref2 ? _k < _ref2 : _k > _ref2; k = 0 <= _ref2 ? ++_k : --_k) {
            vol[i][j][k] = 0;
            sliceSize = dims[1] * dims[2];
          }
        }
      }
      for (i = _l = 0, _ref3 = vec.length; 0 <= _ref3 ? _l < _ref3 : _l > _ref3; i = 0 <= _ref3 ? ++_l : --_l) {
        if (typeof vec[i] === undefined) {
          continue;
        }
        x = Math.floor(i / sliceSize);
        y = Math.floor((i - (x * sliceSize)) / dims[2]);
        z = i - (x * sliceSize) - (y * dims[2]);
        vol[x][y][z] = vec[i];
      }
      return vol;
    },
    transformCoordinates: function(coords, matrix, round) {
      var m, res, v;
      if (round == null) {
        round = true;
      }
      m = $M(matrix);
      coords = coords.slice(0);
      coords.push(1);
      v = $V(coords);
      res = [];
      m.x(v).each(function(e) {
        if (round) {
          e = Math.round(e);
        }
        return res.push(e);
      });
      return res;
    },
    viewerToAtlas: function(coords) {
      var matrix;
      matrix = [[180, 0, 0, -90], [0, -218, 0, 90], [0, 0, -180, 108]];
      return this.transformCoordinates(coords, matrix);
    },
    atlasToViewer: function(coords) {
      var matrix;
      matrix = [[1.0 / 180, 0, 0, 0.5], [0, -1.0 / 218, 0, 90.0 / 218], [0, 0, -1.0 / 180, 108.0 / 180]];
      return this.transformCoordinates(coords, matrix, false);
    },
    atlasToImage: function(coords) {
      var matrix;
      matrix = [[-0.5, 0, 0, 45], [0, 0.5, 0, 63], [0, 0, 0.5, 36]];
      return this.transformCoordinates(coords, matrix);
    },
    imageToAtlas: function(coords) {
      var matrix;
      matrix = [[-2, 0, 0, 90], [0, 2, 0, -126], [0, 0, 2, -72]];
      return this.transformCoordinates(coords, matrix);
    }
  };

  UserInterface = (function() {
    function UserInterface(viewer, layerListId, layerSettingClass) {
      this.viewer = viewer;
      this.layerListId = layerListId;
      this.layerSettingClass = layerSettingClass;
      this.viewSettings = this.viewer.viewSettings;
      this.components = {};
      $(this.layerListId).sortable({
        update: (function(_this) {
          return function() {
            var layers, paint;
            layers = ($('.layer_list_item').map(function() {
              return $(this).text();
            })).toArray();
            return _this.viewer.sortLayers(layers, paint = true);
          };
        })(this)
      });
      $(this.layerSettingClass).change((function(_this) {
        return function(e) {
          return _this.settingsChanged();
        };
      })(this));
    }

    UserInterface.prototype.addSlider = function(name, element, orientation, min, max, value, step, textField) {
      var slider;
      slider = new SliderComponent(this, name, element, orientation, min, max, value, step);
      if (textField != null) {
        this.addTextFieldForSlider(textField, slider);
      }
      return this.components[name] = slider;
    };

    UserInterface.prototype.addTextField = function(name, element) {
      var tf;
      tf = new TextFieldComponent(this, name, element);
      return this.components[name] = tf;
    };

    UserInterface.prototype.addTextFieldForSlider = function(element, slider) {
      var name, tf;
      name = slider.name + '_textField';
      tf = new TextFieldComponent(this, name, element, slider);
      return slider.attachTextField(tf);
    };

    UserInterface.prototype.addColorSelect = function(element) {
      return this.components['colorPalette'] = new SelectComponent(this, 'colorPalette', element, Object.keys(ColorMap.PALETTES));
    };

    UserInterface.prototype.addSignSelect = function(element) {
      return this.components['sign'] = new SelectComponent(this, 'signSelect', element, ['both', 'positive', 'negative']);
    };

    UserInterface.prototype.addSettingsCheckboxes = function(element, settings) {
      var checked, s, v, validSettings;
      $(element).empty();
      validSettings = {
        panzoom: 'Pan/zoom',
        crosshairs: 'Crosshairs',
        labels: 'Labels'
      };
      for (s in settings) {
        v = settings[s];
        if (s in validSettings) {
          checked = v ? ' checked' : '';
          $(element).append("<div class='checkbox_row'><input type='checkbox' class='settings_box' " + checked + " id='" + s + "'>" + validSettings[s] + "</div>");
        }
      }
      return $('.settings_box').change((function(_this) {
        return function(e) {
          return _this.checkboxesChanged();
        };
      })(this));
    };

    UserInterface.prototype.settingsChanged = function() {
      var component, name, settings, _ref;
      settings = {};
      _ref = this.components;
      for (name in _ref) {
        component = _ref[name];
        settings[name] = component.getValue();
      }
      return this.viewer.updateSettings(settings);
    };

    UserInterface.prototype.checkboxesChanged = function() {
      var id, s, settings, val, _i, _len, _ref;
      settings = {};
      _ref = $('.settings_box');
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        s = _ref[_i];
        id = $(s).attr('id');
        val = $(s).is(':checked') ? true : false;
        settings[id + 'Enabled'] = val;
      }
      return this.viewer.updateViewSettings(settings, true);
    };

    UserInterface.prototype.updateComponents = function(settings) {
      var name, value, _results;
      _results = [];
      for (name in settings) {
        value = settings[name];
        if (name in this.components) {
          _results.push(this.components[name].setValue(value));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    UserInterface.prototype.updateThresholdSliders = function(image) {
      if ('pos-threshold' in this.components) {
        this.components['pos-threshold'].setRange(0, image.max);
      }
      if ('neg-threshold' in this.components) {
        return this.components['neg-threshold'].setRange(image.min, 0);
      }
    };

    var layerColors = ["#E2E2E2", "rgba(117, 151, 208, 0.5)", "rgba(176, 126, 182, 0.5)", "rgba(206, 190, 109, 0.5)", "rgba(119, 181, 138, 0.5)", "rgba(206, 125, 105, 0.5)", 
                       "rgba(125, 116, 163, 0.5)", "rgba(174, 200, 124, 0.5)", "rgba(186, 126, 57, 0.5)", "rgba(207, 117, 147, 0.5)", "rgba(132, 107, 67, 0.5)", 
                       "rgba(111, 128, 153, 0.5)", "rgba(140, 64, 88, 0.5)", "rgba(216, 174, 84, 0.5)", "rgba(90, 168, 167, 0.5)", "rgba(58, 60, 124, 0.5)", 
                       "rgba(255, 123, 91, 0.5)", "rgba(114, 102, 42, 0.5)", "rgba(145, 229, 128, 0.5)", "rgba(188, 213, 255, 0.5)", "rgba(226, 145, 221, 0.5)",
                       "rgba(139, 117, 234, 0.5)", "rgba(224, 189, 132, 0.5)", "rgba(214, 79, 124, 0.5)", "rgba(164, 234, 202, 0.5)", "rgba(244, 255, 107, 0.5)"];

    UserInterface.prototype.updateLayerList = function(layers, selectedIndex) {
      var deletion_icon, download_icon, i, l, visibility_icon, _i, _ref;
      var layerIndex = 0;
      //var kLayerColors = layerColors.slice(0, layers.length).reverse() 
      var kLayerColors = layerColors.slice(0, layers.length)
      $(this.layerListId).empty();
      for (i = _i = 0, _ref = layers.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        l = layers[i];
        visibility_icon = this.viewSettings.visibilityIconEnabled ? "<div class='visibility_icon' title='Hide/show image'><span class='glyphicon glyphicon-eye-open'></i></div>" : '';
        deletion_icon = this.viewSettings.deletionIconEnabled ? "<div class='deletion_icon' title='Remove this layer'><span class='glyphicon glyphicon-trash'></i></div>" : '';
        download_icon = l.download ? "<div class='download_icon' title='Download this image'><span class='glyphicon glyphicon-save'></i></div>" : '';
        layerColor = kLayerColors[layerIndex];
        layerIndex = layerIndex + 1;
        $(this.layerListId).append($(("<li class='layer_list_item'>" + visibility_icon + "<div class='layer_label' style='background:" + layerColor + "'>") + l.name + ("</div>" + deletion_icon + download_icon + "</li>")));
      }
      $('.layer_label').click((function(_this) {
        return function(e) {
          return _this.viewer.selectLayer($('.layer_label').index(e.target));
        };
      })(this));
      $('.visibility_icon').click((function(_this) {
        return function(e) {
          return _this.toggleLayer($('.visibility_icon').index($(e.target).closest('div')));
        };
      })(this));
      $('.deletion_icon').click((function(_this) {
        return function(e) {
          if (confirm("Are you sure you want to remove this layer?")) {
            return _this.viewer.deleteLayer($('.deletion_icon').index($(e.target).closest('div')));
          }
        };
      })(this));
      $('.download_icon').click((function(_this) {
        return function(e) {
          return _this.viewer.downloadImage($('.download_icon').index($(e.target).closest('div')));
        };
      })(this));
      return $(this.layerListId).val(selectedIndex);
    };

    UserInterface.prototype.updateLayerVisibility = function(visible) {
      var i, _i, _ref, _results;
      if (!this.viewSettings.visibilityIconEnabled) {
        return;
      }
      _results = [];
      for (i = _i = 0, _ref = visible.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        if (visible[i]) {
          _results.push($('.visibility_icon>span').eq(i).removeClass('glyphicon glyphicon-eye-close').addClass('glyphicon glyphicon-eye-open'));
        } else {
          _results.push($('.visibility_icon>span').eq(i).removeClass('glyphicon glyphicon-eye-open').addClass('glyphicon glyphicon-eye-close'));
        }
      }
      return _results;
    };

    UserInterface.prototype.updateLayerSelection = function(id) {
      $('.layer_label').eq(id).addClass('selected');
      return $('.layer_label').not(":eq(" + id + ")").removeClass('selected');
    };

    UserInterface.prototype.toggleLayer = function(id) {
      return this.viewer.toggleLayer(id);
    };

    return UserInterface;

  })();

  DataPanel = (function() {
    function DataPanel(viewer) {
      this.viewer = viewer;
      this.fields = {};
    }

    DataPanel.prototype.addDataField = function(name, element) {
      return this.fields[name] = new DataField(this, name, element);
    };

    DataPanel.prototype.addCoordinateFields = function(name, element) {
      var i, target, _i;
      target = $(element);
      for (i = _i = 0; _i < 2; i = ++_i) {
        target.append($("<div class='axis_pos' id='axis_pos_" + axis + "'></div>"));
      }
      return $('axis_pos').change((function(_this) {
        return function(e) {
          var cc, _j;
          for (i = _j = 0; _j < 2; i = ++_j) {
            cc = $("#axis_pos_" + i).val();
            _this.viewer.coords_abc[i] = Transform.atlasToViewer(cc);
            _this.viewer.coords_ijk[i] = cc;
          }
          return _this.viewer.update();
        };
      })(this));
    };

    DataPanel.prototype.update = function(data) {
      var i, k, pos, v, _results;
      _results = [];
      for (k in data) {
        v = data[k];
        if (k in this.fields) {
          if (k === 'currentCoordsMulti') {
            _results.push((function() {
              var _results1;
              _results1 = [];
              for (pos in v) {
                i = v[pos];
                _results1.push($("plane" + i + "_pos").text(pos));
              }
              return _results1;
            })());
          } else {
            if (k === 'currentCoords') {
              v = "[" + v + "]";
            }
            _results.push($(this.fields[k].element).text(v));
          }
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    return DataPanel;

  })();

  ViewSettings = (function() {

    /* Stores any settings common to all views--e.g., crosshair preferences,
    dragging/zooming, etc. Individual views can override these settings if view-specific
    options are desired.
     */
    function ViewSettings(options) {
      this.settings = {
        panzoomEnabled: false,
        crosshairsEnabled: false,
        crosshairsWidth: 1,
        crosshairsColor: 'white',
        labelsEnabled: true,
        visibilityIconEnabled: true,
        deletionIconEnabled: true
      };
      this.updateSettings(options);
    }

    ViewSettings.prototype.updateSettings = function(options) {
      var k, v, _ref;
      $.extend(this.settings, options);
      _ref = this.settings;
      for (k in _ref) {
        v = _ref[k];
        this[k] = v;
      }
      return this.crosshairs = new Crosshairs(this.crosshairsEnabled, this.crosshairsColor, this.crosshairsWidth);
    };

    return ViewSettings;

  })();

  View = (function() {
    function View(viewer, viewSettings, element, dim, labels, slider) {
      this.viewer = viewer;
      this.viewSettings = viewSettings;
      this.element = element;
      this.dim = dim;
      this.labels = labels != null ? labels : true;
      this.slider = slider != null ? slider : null;
      this._handleScroll = __bind(this._handleScroll, this);
      this._zoom = __bind(this._zoom, this);
      this._canvasMouseMove = __bind(this._canvasMouseMove, this);
      this._canvasClick = __bind(this._canvasClick, this);
      this.resetCanvas();
      this._jQueryInit();
    }

    View.prototype.addSlider = function(name, element, orientation, min, max, value, step, textField) {
      this.slider = new SliderComponent(this, name, element, orientation, min, max, value, step);
      if (textField != null) {
        return this.viewer.addTextFieldForSlider(textField, this.slider);
      }
    };

    View.prototype.clear = function() {
      var currentState;
      currentState = $.extend(true, {}, this.context.getTransform());
      this.context.reset();
      this.context.fillStyle = 'black';
      this.context.fillRect(0, 0, this.width, this.height);
      return this.context.setTransformFromArray(currentState);
    };

    View.prototype.resetCanvas = function() {
      this.canvas = $(this.element).find('canvas');
      this.width = this.canvas.width();
      this.height = this.canvas.height();
      this.context = this.canvas[0].getContext("2d");
      trackTransforms(this.context);
      this.lastX = this.width / 2;
      this.lastY = this.height / 2;
      this.dragStart = void 0;
      this.scaleFactor = 1.1;
      return this.clear();
    };

    View.prototype.paint = function(layer) {
      var col, cols, data, dims, fuzz, i, img, j, val, xCell, xp, yCell, yp, _i, _j, _ref, _ref1;
      if (this.width === 0) {
        this.resetCanvas();
      }
      data = layer.slice(this, this.viewer);
      cols = layer.colorMap.map(data);
      img = layer.image;
      dims = [[img.y, img.z], [img.x, img.z], [img.x, img.y]];
      xCell = this.width / dims[this.dim][0];
      yCell = this.height / dims[this.dim][1];
      this.xCell = xCell;
      this.yCell = yCell;
      fuzz = 0.5;
      this.context.globalAlpha = layer.opacity;
      this.context.lineWidth = 1;
      for (i = _i = 0, _ref = dims[this.dim][1]; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        for (j = _j = 0, _ref1 = dims[this.dim][0]; 0 <= _ref1 ? _j < _ref1 : _j > _ref1; j = 0 <= _ref1 ? ++_j : --_j) {
          if (typeof data[i][j] === undefined | data[i][j] === 0) {
            continue;
          }
          xp = this.width - (j + 1) * xCell;
          yp = this.height - (i + 1) * yCell;
          col = cols[i][j];
          this.context.fillStyle = col;
          this.context.fillRect(xp, yp, xCell + fuzz, yCell + fuzz);
        }
      }
      this.context.globalAlpha = 1.0;
      if (this.slider != null) {
        val = this.viewer.coords_abc[this.dim];
        if (this.dim !== Viewer.XAXIS) {
          val = 1 - val;
        }
        return $(this.slider.element).slider('option', 'value', val);
      }
    };

    View.prototype.drawCrosshairs = function() {
      var ch, xPos, yPos;
      ch = this.viewSettings.crosshairs;
      if (!ch.visible) {
        return;
      }
      this.context.fillStyle = ch.color;
      xPos = this.viewer.coords_abc[[1, 0, 0][this.dim]] * this.width;
      yPos = this.viewer.coords_abc[[2, 2, 1][this.dim]] * this.height;
      this.context.fillRect(0, yPos - ch.width / 2, this.width, ch.width);
      return this.context.fillRect(xPos - ch.width / 2, 0, ch.width, this.height);
    };

    View.prototype.drawLabels = function() {
      var fontSize, planePos, planeText;
      if (!this.viewSettings.labelsEnabled) {
        return;
      }
      fontSize = Math.round(this.height / 15);
      this.context.fillStyle = 'white';
      this.context.font = "" + fontSize + "px Helvetica";
      this.context.textAlign = 'left';
      this.context.textBaseline = 'middle';
      planePos = this.viewer.coords_xyz()[this.dim];
      if (planePos > 0) {
        planePos = '+' + planePos;
      }
      planeText = ['x', 'y', 'z'][this.dim] + ' = ' + planePos;
      this.context.fillText(planeText, 0.03 * this.width, 0.95 * this.height);
      this.context.textAlign = 'center';
      switch (this.dim) {
        case 0:
          this.context.fillText('A', 0.05 * this.width, 0.5 * this.height);
          return this.context.fillText('P', 0.95 * this.width, 0.5 * this.height);
        case 1:
          this.context.fillText('D', 0.95 * this.width, 0.05 * this.height);
          return this.context.fillText('V', 0.95 * this.width, 0.95 * this.height);
        case 2:
          this.context.fillText('L', 0.05 * this.width, 0.05 * this.height);
          return this.context.fillText('R', 0.95 * this.width, 0.05 * this.height);
      }
    };

    View.prototype.navSlideChange = function(value) {
      if (this.dim !== Viewer.XAXIS) {
        value = 1 - value;
      }
      return this.viewer.moveToViewerCoords(this.dim, value);
    };

    View.prototype._snapToGrid = function(x, y) {
      var dims, xVoxSize, yVoxSize;
      dims = [91, 109, 91];
      dims.splice(this.dim, 1);
      xVoxSize = 1 / dims[0];
      yVoxSize = 1 / dims[1];
      x = (Math.floor(x / xVoxSize) + 0.5) * xVoxSize;
      y = (Math.floor(y / yVoxSize) + 0.5) * yVoxSize;
      return {
        x: x,
        y: y
      };
    };

    View.prototype._jQueryInit = function() {
      var canvas;
      canvas = $(this.element).find('canvas');
      canvas.click(this._canvasClick);
      canvas.mousedown((function(_this) {
        return function(evt) {
          document.body.style.mozUserSelect = document.body.style.webkitUserSelect = document.body.style.userSelect = "none";
          _this.lastX = evt.offsetX || (evt.pageX - canvas.offset().left);
          _this.lastY = evt.offsetY || (evt.pageY - canvas.offset().top);
          return _this.dragStart = _this.context.transformedPoint(_this.lastX, _this.lastY);
        };
      })(this));
      canvas.mousemove((function(_this) {
        return function(evt) {
          var pt;
          _this._canvasMouseMove(evt);
          if (!_this.viewSettings.panzoomEnabled) {
            return;
          }
          _this.lastX = evt.offsetX || (evt.pageX - canvas.offset().left);
          _this.lastY = evt.offsetY || (evt.pageY - canvas.offset().top);
          if (_this.dragStart) {
            pt = _this.context.transformedPoint(_this.lastX, _this.lastY);
            _this.context.translate(pt.x - _this.dragStart.x, pt.y - _this.dragStart.y);
            return _this.viewer.paint();
          }
        };
      })(this));
      canvas.mouseup((function(_this) {
        return function(evt) {
          return _this.dragStart = null;
        };
      })(this));
      canvas.on("DOMMouseScroll", this._handleScroll);
      return canvas.on("mousewheel", this._handleScroll);
    };

    View.prototype._canvasClick = function(e) {
      var clickX, clickY, cx, cy, pt;
      $(this.viewer).trigger('beforeClick');
      clickX = e.offsetX || (e.pageX - $(this.element).offset().left);
      clickY = e.offsetY || (e.pageY - $(this.element).offset().top);
      pt = this.context.transformedPoint(clickX, clickY);
      cx = pt.x / this.width;
      cy = pt.y / this.height;
      pt = this._snapToGrid(cx, cy);
      this.viewer.moveToViewerCoords(this.dim, pt.x, pt.y);
      
      // Added by Ellie Beam to print the voxel value (12/22/19)
      var xyz = this.viewer.coords_ijk;
      var x, y, z; x = xyz[0]; y = xyz[1]; z = xyz[2];
      var value = 0; var name = ""; var color = "white"; 
      if (this.viewer.layerList.layers.length > 1) {
        var n_layers = this.viewer.layerList.layers.length - 1;
        for (var i = 1; i < this.viewer.layerList.layers.length; i++) {
          var this_value = this.viewer.layerList.layers[i].image.data[z][y][x];
          if (this_value > value) {
            value = this_value;
            name = names[n_layers][i-1];
            palette = ColorMap.PALETTES[nke_palette[i-1]]
            color = palette[Math.floor(palette.length * 0.3)];
          }
        }
        square = "<div id='value_data_swatch' style='background-color:" + color + "'></div>"
        document.getElementById("value_data").innerHTML = square + "<div style='margin-top:-30px;width:135px;float:right;text-align:left'><span>" + name + "</span><br/>PPMI = " + value.toFixed(5) + "</div>";
        document.getElementById("value_data_tooltip").setAttribute("data-tooltip", "Positive point-wise mutual information (PPMI) of the structure with occurrences of its domain terms (FDR<0.0001)");
        if (value == 0) {
          document.getElementById("value_data").innerHTML = ""; 
        }
      }
      
      return $(this.viewer).trigger('afterClick');
    };

    View.prototype._canvasMouseMove = function(e) {
      var clickX, clickY, cx, cxyz, cy, pt;
      clickX = e.offsetX || (e.pageX - $(this.element).offset().left);
      clickY = e.offsetY || (e.pageY - $(this.element).offset().top);
      pt = this.context.transformedPoint(clickX, clickY);
      cx = pt.x / this.width;
      cy = pt.y / this.height;
      pt = this._snapToGrid(cx, cy);
      cxyz = this.viewer.viewer2dTo3d(this.dim, pt.x, pt.y);
      return $(this.viewer).trigger('mouseMove', {
        ijk: cxyz
      });
    };

    View.prototype._zoom = function(clicks) {
      var factor, pt;
      if (!this.viewSettings.panzoomEnabled) {
        return;
      }
      pt = this.context.transformedPoint(this.lastX, this.lastY);
      this.context.translate(pt.x, pt.y);
      factor = Math.pow(this.scaleFactor, clicks);
      this.context.scale(factor, factor);
      this.context.translate(-pt.x, -pt.y);
      return this.viewer.paint();
    };

    View.prototype._handleScroll = function(evt) {
      var delta, oe;
      oe = evt.originalEvent;
      delta = (oe.wheelDelta ? oe.wheelDelta / 40 : (oe.detail ? -oe.detail : 0));
      if (delta) {
        this._zoom(delta);
      }
      return evt.preventDefault() && false;
    };

    return View;

  })();

  Crosshairs = (function() {
    function Crosshairs(visible, color, width) {
      this.visible = visible != null ? visible : true;
      this.color = color != null ? color : 'red';
      this.width = width != null ? width : 2;
    }

    return Crosshairs;

  })();

  ColorMap = (function() {
    var basic, col, _i, _len;

    ColorMap.PALETTES = {
      grayscale: ['#000000', '#303030', 'gray', 'silver', 'white']
    };

    basic = ['red', 'green', 'blue', 'yellow', 'purple', 'lime', 'aqua', 'navy'];

    for (_i = 0, _len = basic.length; _i < _len; _i++) {
      col = basic[_i];
      ColorMap.PALETTES[col] = ['black', col, 'white'];
    }

    $.extend(ColorMap.PALETTES, {
      'nke_red': ['#fff5f0', '#fff4ef', '#fff4ee', '#fff3ed', '#fff2ec', '#fff2eb', '#fff1ea', '#fff0e9', '#fff0e8', '#ffefe8', '#ffeee7', '#ffeee6', '#ffede5', '#ffece4', '#ffece3', '#ffebe2', '#feeae1', '#feeae0', '#fee9df', '#fee8de', '#fee8dd', '#fee7dc', '#fee7db', '#fee6da', '#fee5d9', '#fee5d8', '#fee4d8', '#fee3d7', '#fee3d6', '#fee2d5', '#fee1d4', '#fee1d3', '#fee0d2', '#fedfd0', '#fedecf', '#fedccd', '#fedbcc', '#fedaca', '#fed9c9', '#fed8c7', '#fdd7c6', '#fdd5c4', '#fdd4c2', '#fdd3c1', '#fdd2bf', '#fdd1be', '#fdd0bc', '#fdcebb', '#fdcdb9', '#fdccb8', '#fdcbb6', '#fdcab5', '#fdc9b3', '#fdc7b2', '#fdc6b0', '#fdc5ae', '#fcc4ad', '#fcc3ab', '#fcc2aa', '#fcc1a8', '#fcbfa7', '#fcbea5', '#fcbda4', '#fcbca2', '#fcbba1', '#fcb99f', '#fcb89e', '#fcb79c', '#fcb69b', '#fcb499', '#fcb398', '#fcb296', '#fcb095', '#fcaf93', '#fcae92', '#fcad90', '#fcab8f', '#fcaa8d', '#fca98c', '#fca78b', '#fca689', '#fca588', '#fca486', '#fca285', '#fca183', '#fca082', '#fc9e80', '#fc9d7f', '#fc9c7d', '#fc9b7c', '#fc997a', '#fc9879', '#fc9777', '#fc9576', '#fc9474', '#fc9373', '#fc9272', '#fc9070', '#fc8f6f', '#fc8e6e', '#fc8d6d', '#fc8b6b', '#fc8a6a', '#fc8969', '#fc8767', '#fc8666', '#fc8565', '#fc8464', '#fc8262', '#fc8161', '#fc8060', '#fc7f5f', '#fb7d5d', '#fb7c5c', '#fb7b5b', '#fb7a5a', '#fb7858', '#fb7757', '#fb7656', '#fb7555', '#fb7353', '#fb7252', '#fb7151', '#fb7050', '#fb6e4e', '#fb6d4d', '#fb6c4c', '#fb6b4b', '#fb694a', '#fa6849', '#fa6648', '#fa6547', '#f96346', '#f96245', '#f96044', '#f85f43', '#f85d42', '#f75c41', '#f75b40', '#f7593f', '#f6583e', '#f6563d', '#f6553c', '#f5533b', '#f5523a', '#f4503a', '#f44f39', '#f44d38', '#f34c37', '#f34a36', '#f34935', '#f24734', '#f24633', '#f14432', '#f14331', '#f14130', '#f0402f', '#f03f2e', '#f03d2d', '#ef3c2c', '#ee3a2c', '#ed392b', '#ec382b', '#eb372a', '#ea362a', '#e93529', '#e83429', '#e63328', '#e53228', '#e43027', '#e32f27', '#e22e27', '#e12d26', '#e02c26', '#de2b25', '#dd2a25', '#dc2924', '#db2824', '#da2723', '#d92523', '#d82422', '#d72322', '#d52221', '#d42121', '#d32020', '#d21f20', '#d11e1f', '#d01d1f', '#cf1c1f', '#ce1a1e', '#cc191e', '#cb181d', '#ca181d', '#c9181d', '#c8171c', '#c7171c', '#c5171c', '#c4161c', '#c3161b', '#c2161b', '#c1161b', '#bf151b', '#be151a', '#bd151a', '#bc141a', '#bb141a', '#b91419', '#b81419', '#b71319', '#b61319', '#b51318', '#b31218', '#b21218', '#b11218', '#b01217', '#af1117', '#ad1117', '#ac1117', '#ab1016', '#aa1016', '#a91016', '#a81016', '#a60f15', '#a50f15', '#a30f15', '#a10e15', '#9f0e14', '#9d0d14', '#9c0d14', '#9a0c14', '#980c13', '#960b13', '#940b13', '#920a13', '#900a12', '#8e0912', '#8c0912', '#8a0812', '#880811', '#860811', '#840711', '#820711', '#800610', '#7e0610', '#7c0510', '#7a0510', '#79040f', '#77040f', '#75030f', '#73030f', '#71020e', '#6f020e', '#6d010e', '#6b010e', '#69000d', '#67000d'],
      'nke_orange': ['#fff5eb', '#fff5ea', '#fff4e9', '#fff4e8', '#fff3e7', '#fff3e6', '#fff2e6', '#fff2e5', '#fff1e4', '#fff1e3', '#fff0e2', '#fff0e1', '#ffefe0', '#ffefdf', '#ffeede', '#ffeedd', '#feeddc', '#feeddc', '#feeddb', '#feecda', '#feecd9', '#feebd8', '#feebd7', '#feead6', '#feead5', '#fee9d4', '#fee9d3', '#fee8d2', '#fee8d2', '#fee7d1', '#fee7d0', '#fee6cf', '#fee6ce', '#fee5cc', '#fee5cb', '#fee4ca', '#fee3c8', '#fee2c7', '#fee2c6', '#fee1c4', '#fee0c3', '#fee0c1', '#fedfc0', '#fedebf', '#fedebd', '#feddbc', '#fedcbb', '#fedcb9', '#fddbb8', '#fddab6', '#fdd9b5', '#fdd9b4', '#fdd8b2', '#fdd7b1', '#fdd7af', '#fdd6ae', '#fdd5ad', '#fdd5ab', '#fdd4aa', '#fdd3a9', '#fdd3a7', '#fdd2a6', '#fdd1a4', '#fdd1a3', '#fdd0a2', '#fdcfa0', '#fdce9e', '#fdcd9c', '#fdcb9b', '#fdca99', '#fdc997', '#fdc895', '#fdc794', '#fdc692', '#fdc590', '#fdc48f', '#fdc38d', '#fdc28b', '#fdc189', '#fdc088', '#fdbf86', '#fdbe84', '#fdbd83', '#fdbb81', '#fdba7f', '#fdb97d', '#fdb87c', '#fdb77a', '#fdb678', '#fdb576', '#fdb475', '#fdb373', '#fdb271', '#fdb170', '#fdb06e', '#fdaf6c', '#fdae6a', '#fdad69', '#fdac67', '#fdab66', '#fda965', '#fda863', '#fda762', '#fda660', '#fda55f', '#fda45d', '#fda35c', '#fda25a', '#fda159', '#fda057', '#fd9f56', '#fd9e54', '#fd9d53', '#fd9c51', '#fd9b50', '#fd9a4e', '#fd994d', '#fd984b', '#fd974a', '#fd9649', '#fd9547', '#fd9446', '#fd9344', '#fd9243', '#fd9141', '#fd9040', '#fd8f3e', '#fd8e3d', '#fd8c3b', '#fc8b3a', '#fc8a39', '#fc8937', '#fb8836', '#fb8735', '#fb8634', '#fa8532', '#fa8331', '#f98230', '#f9812e', '#f9802d', '#f87f2c', '#f87e2b', '#f87d29', '#f77b28', '#f77a27', '#f67925', '#f67824', '#f67723', '#f57622', '#f57520', '#f5741f', '#f4721e', '#f4711c', '#f3701b', '#f36f1a', '#f36e19', '#f26d17', '#f26c16', '#f26b15', '#f16913', '#f16813', '#f06712', '#ef6612', '#ee6511', '#ee6410', '#ed6310', '#ec620f', '#eb610f', '#eb600e', '#ea5f0e', '#e95e0d', '#e85d0c', '#e75c0c', '#e75b0b', '#e65a0b', '#e5590a', '#e4580a', '#e45709', '#e35608', '#e25508', '#e15407', '#e15307', '#e05206', '#df5106', '#de5005', '#de4e05', '#dd4d04', '#dc4c03', '#db4b03', '#db4a02', '#da4902', '#d94801', '#d84801', '#d64701', '#d54601', '#d34601', '#d14501', '#d04501', '#ce4401', '#cd4401', '#cb4302', '#c94202', '#c84202', '#c64102', '#c54102', '#c34002', '#c14002', '#c03f02', '#be3f02', '#bd3e02', '#bb3d02', '#b93d02', '#b83c02', '#b63c02', '#b53b02', '#b33b02', '#b13a03', '#b03903', '#ae3903', '#ad3803', '#ab3803', '#a93703', '#a83703', '#a63603', '#a53603', '#a43503', '#a23503', '#a13403', '#a03403', '#9f3303', '#9e3303', '#9c3203', '#9b3203', '#9a3103', '#993103', '#973003', '#963003', '#952f03', '#942f03', '#932f03', '#912e04', '#902e04', '#8f2d04', '#8e2d04', '#8c2c04', '#8b2c04', '#8a2b04', '#892b04', '#882a04', '#862a04', '#852904', '#842904', '#832804', '#812804', '#802704', '#7f2704'], 
      'nke_yellow': ['#ffffff', '#fffffe', '#fffefd', '#fffefc', '#fffefb', '#fffefa', '#fffdf9', '#fffdf8', '#fefdf7', '#fefdf6', '#fefcf5', '#fefcf4', '#fefcf3', '#fefcf2', '#fefbf1', '#fefbf0', '#fefbef', '#fefbee', '#fefaed', '#fefaec', '#fefaeb', '#fefaea', '#fef9e9', '#fef9e8', '#fdf9e7', '#fdf9e6', '#fdf8e5', '#fdf8e4', '#fdf8e3', '#fdf8e2', '#fdf7e1', '#fdf7e0', '#fdf7df', '#fdf7de', '#fdf6dd', '#fdf6dc', '#fdf6db', '#fdf6da', '#fdf5d9', '#fdf5d8', '#fcf5d7', '#fcf5d6', '#fcf4d5', '#fcf4d4', '#fcf4d3', '#fcf4d2', '#fcf3d1', '#fcf3d0', '#fcf3cf', '#fcf3ce', '#fcf2cd', '#fcf2cc', '#fcf2cb', '#fcf2ca', '#fcf1c9', '#fcf1c8', '#fbf1c7', '#fbf1c6', '#fbf0c5', '#fbf0c4', '#fbf0c3', '#fbf0c2', '#fbefc1', '#fbefc0', '#fbefbf', '#fbefbe', '#fbeebd', '#fbeebc', '#fbeebb', '#fbeeba', '#fbedb9', '#fbedb8', '#faedb7', '#faedb6', '#faecb5', '#faecb4', '#faecb3', '#faecb2', '#faebb1', '#faebb0', '#faebaf', '#faebae', '#faeaad', '#faeaac', '#faeaab', '#faeaaa', '#fae9a9', '#fae9a8', '#f9e9a7', '#f9e9a6', '#f9e8a5', '#f9e8a4', '#f9e8a3', '#f9e8a2', '#f9e7a1', '#f9e7a0', '#f9e79f', '#f9e79e', '#f9e69d', '#f9e69c', '#f9e69b', '#f9e69a', '#f9e599', '#f9e598', '#f8e597', '#f8e596', '#f8e495', '#f8e494', '#f8e493', '#f8e492', '#f8e391', '#f8e390', '#f8e38f', '#f8e38e', '#f8e28d', '#f8e28c', '#f8e28b', '#f8e28a', '#f8e189', '#f8e188', '#f7e187', '#f7e186', '#f7e085', '#f7e084', '#f7e083', '#f7e082', '#f7df81', '#f7df80', '#f7df7f', '#f7df7e', '#f7de7d', '#f7de7c', '#f7de7b', '#f7de7a', '#f7dd79', '#f6dd78', '#f6dd77', '#f6dd76', '#f6dc75', '#f6dc74', '#f6dc73', '#f6dc72', '#f6db71', '#f6db70', '#f6db6f', '#f6db6e', '#f6da6d', '#f6da6c', '#f6da6b', '#f6da6a', '#f6d969', '#f5d968', '#f5d967', '#f5d966', '#f5d865', '#f5d864', '#f5d863', '#f5d862', '#f5d761', '#f5d760', '#f5d75f', '#f5d75e', '#f5d65d', '#f5d65c', '#f5d65b', '#f5d65a', '#f5d559', '#f4d558', '#f4d557', '#f4d556', '#f4d455', '#f4d454', '#f4d453', '#f4d452', '#f4d351', '#f4d350', '#f4d34f', '#f4d34e', '#f4d24d', '#f4d24c', '#f4d24b', '#f4d24a', '#f4d149', '#f3d148', '#f3d147', '#f3d146', '#f3d045', '#f3d044', '#f3d043', '#f3d042', '#f3cf41', '#f3cf40', '#f3cf3f', '#f3cf3e', '#f3ce3d', '#f3ce3c', '#f3ce3b', '#f3ce3a', '#f3cd39', '#f2cd38', '#f2cd37', '#f2cd36', '#f2cc35', '#f2cc34', '#f2cc33', '#f2cc32', '#f2cb31', '#f2cb30', '#f2cb2f', '#f2cb2e', '#f2ca2d', '#f2ca2c', '#f2ca2b', '#f2ca2a', '#f2c929', '#f1c928', '#f1c927', '#f1c926', '#f1c825', '#f1c824', '#f1c823', '#f1c822', '#f1c721', '#f1c720', '#f1c71f', '#f1c71e', '#f1c61d', '#f1c61c', '#f1c61b', '#f1c61a', '#f1c519', '#f0c518', '#f0c517', '#f0c516', '#f0c415', '#f0c414', '#f0c413', '#f0c412', '#f0c311', '#f0c310', '#f0c30f', '#f0c30e', '#f0c20d', '#f0c20c', '#f0c20b', '#f0c20a', '#f0c109', '#efc108', '#efc107', '#efc106', '#efc005', '#efc004', '#efc003', '#efbf02', '#efbf01', '#efbf00'],
      'nke_chartreuse': ['#ffffff', '#fefffe', '#fefffd', '#fdfefc', '#fcfefb', '#fcfefa', '#fbfef9', '#fafdf8', '#fafdf7', '#f9fdf6', '#f8fdf5', '#f8fcf4', '#f7fcf3', '#f6fcf2', '#f6fcf1', '#f5fcf0', '#f5fbef', '#f4fbee', '#f3fbed', '#f3fbec', '#f2faeb', '#f1faea', '#f1fae9', '#f0fae8', '#eff9e7', '#eff9e6', '#eef9e5', '#edf9e4', '#edf9e3', '#ecf8e2', '#ebf8e1', '#ebf8e0', '#eaf8df', '#e9f7de', '#e9f7dd', '#e8f7dc', '#e7f7db', '#e7f6da', '#e6f6d9', '#e5f6d8', '#e5f6d7', '#e4f6d6', '#e3f5d5', '#e3f5d4', '#e2f5d3', '#e2f5d2', '#e1f4d1', '#e0f4d0', '#e0f4cf', '#dff4ce', '#def3cd', '#def3cc', '#ddf3cb', '#dcf3ca', '#dcf3c9', '#dbf2c8', '#daf2c7', '#daf2c6', '#d9f2c5', '#d8f1c4', '#d8f1c3', '#d7f1c2', '#d6f1c1', '#d6f0c0', '#d5f0bf', '#d4f0be', '#d4f0bd', '#d3f0bc', '#d2efbb', '#d2efba', '#d1efb9', '#d0efb8', '#d0eeb7', '#cfeeb6', '#cfeeb5', '#ceeeb4', '#cdedb3', '#cdedb2', '#ccedb1', '#cbedb0', '#cbedaf', '#caecae', '#c9ecad', '#c9ecac', '#c8ecab', '#c7ebaa', '#c7eba9', '#c6eba8', '#c5eba7', '#c5eaa6', '#c4eaa5', '#c3eaa4', '#c3eaa3', '#c2eaa2', '#c1e9a1', '#c1e9a0', '#c0e99f', '#bfe99e', '#bfe89d', '#bee89c', '#bee89b', '#bde89a', '#bce799', '#bce798', '#bbe797', '#bae796', '#bae795', '#b9e694', '#b8e693', '#b8e692', '#b7e691', '#b6e590', '#b6e58f', '#b5e58e', '#b4e58d', '#b4e48c', '#b3e48b', '#b2e48a', '#b2e489', '#b1e488', '#b0e387', '#b0e386', '#afe385', '#aee384', '#aee283', '#ade282', '#ace281', '#ace280', '#abe17f', '#abe17e', '#aae17d', '#a9e17c', '#a9e17b', '#a8e07a', '#a7e079', '#a7e078', '#a6e077', '#a5df76', '#a5df75', '#a4df74', '#a3df73', '#a3de72', '#a2de71', '#a1de70', '#a1de6f', '#a0de6e', '#9fdd6d', '#9fdd6c', '#9edd6b', '#9ddd6a', '#9ddc69', '#9cdc68', '#9bdc67', '#9bdc66', '#9adb65', '#99db64', '#99db63', '#98db62', '#98db61', '#97da60', '#96da5f', '#96da5e', '#95da5d', '#94d95c', '#94d95b', '#93d95a', '#92d959', '#92d858', '#91d857', '#90d856', '#90d855', '#8fd754', '#8ed753', '#8ed752', '#8dd751', '#8cd750', '#8cd64f', '#8bd64e', '#8ad64d', '#8ad64c', '#89d54b', '#88d54a', '#88d549', '#87d548', '#86d447', '#86d446', '#85d445', '#85d444', '#84d443', '#83d342', '#83d341', '#82d340', '#81d33f', '#81d23e', '#80d23d', '#7fd23c', '#7fd23b', '#7ed13a', '#7dd139', '#7dd138', '#7cd137', '#7bd136', '#7bd035', '#7ad034', '#79d033', '#79d032', '#78cf31', '#77cf30', '#77cf2f', '#76cf2e', '#75ce2d', '#75ce2c', '#74ce2b', '#73ce2a', '#73ce29', '#72cd28', '#72cd27', '#71cd26', '#70cd25', '#70cc24', '#6fcc23', '#6ecc22', '#6ecc21', '#6dcb20', '#6ccb1f', '#6ccb1e', '#6bcb1d', '#6acb1c', '#6aca1b', '#69ca1a', '#68ca19', '#68ca18', '#67c917', '#66c916', '#66c915', '#65c914', '#64c813', '#64c812', '#63c811', '#62c810', '#62c80f', '#61c70e', '#60c70d', '#60c70c', '#5fc70b', '#5fc60a', '#5ec609', '#5dc608', '#5dc607', '#5cc506', '#5bc505', '#5bc504', '#5ac503', '#59c502', '#59c401', '#58c400'],
      'nke_green': ['#f7fcf5', '#f6fcf4', '#f6fcf4', '#f5fbf3', '#f5fbf2', '#f4fbf2', '#f4fbf1', '#f3faf0', '#f2faf0', '#f2faef', '#f1faee', '#f1faee', '#f0f9ed', '#f0f9ec', '#eff9ec', '#eff9eb', '#eef8ea', '#edf8ea', '#edf8e9', '#ecf8e8', '#ecf8e8', '#ebf7e7', '#ebf7e7', '#eaf7e6', '#e9f7e5', '#e9f7e5', '#e8f6e4', '#e8f6e3', '#e7f6e3', '#e7f6e2', '#e6f5e1', '#e5f5e1', '#e5f5e0', '#e4f5df', '#e3f4de', '#e2f4dd', '#e1f3dc', '#e0f3db', '#dff3da', '#def2d9', '#ddf2d8', '#dcf2d7', '#dbf1d6', '#dbf1d5', '#daf0d4', '#d9f0d3', '#d8f0d2', '#d7efd1', '#d6efd0', '#d5efcf', '#d4eece', '#d3eecd', '#d2edcc', '#d1edcb', '#d0edca', '#cfecc9', '#ceecc8', '#cdecc7', '#ccebc6', '#cbebc5', '#cbeac4', '#caeac3', '#c9eac2', '#c8e9c1', '#c7e9c0', '#c6e8bf', '#c4e8bd', '#c3e7bc', '#c2e7bb', '#c1e6ba', '#c0e6b9', '#bee5b8', '#bde5b6', '#bce4b5', '#bbe4b4', '#bae3b3', '#b8e3b2', '#b7e2b1', '#b6e2af', '#b5e1ae', '#b4e1ad', '#b2e0ac', '#b1e0ab', '#b0dfaa', '#afdfa8', '#aedea7', '#acdea6', '#abdda5', '#aadda4', '#a9dca3', '#a8dca2', '#a7dba0', '#a5db9f', '#a4da9e', '#a3da9d', '#a2d99c', '#a0d99b', '#9fd899', '#9ed798', '#9cd797', '#9bd696', '#99d595', '#98d594', '#97d492', '#95d391', '#94d390', '#92d28f', '#91d28e', '#90d18d', '#8ed08b', '#8dd08a', '#8bcf89', '#8ace88', '#88ce87', '#87cd86', '#86cc85', '#84cc83', '#83cb82', '#81ca81', '#80ca80', '#7fc97f', '#7dc87e', '#7cc87c', '#7ac77b', '#79c67a', '#78c679', '#76c578', '#75c477', '#73c476', '#72c375', '#70c274', '#6ec173', '#6dc072', '#6bc072', '#6abf71', '#68be70', '#66bd6f', '#65bd6f', '#63bc6e', '#62bb6d', '#60ba6c', '#5eb96b', '#5db96b', '#5bb86a', '#5ab769', '#58b668', '#56b567', '#55b567', '#53b466', '#52b365', '#50b264', '#4eb264', '#4db163', '#4bb062', '#4aaf61', '#48ae60', '#46ae60', '#45ad5f', '#43ac5e', '#42ab5d', '#40aa5d', '#3fa95c', '#3fa85b', '#3ea75a', '#3da65a', '#3ca559', '#3ba458', '#3aa357', '#39a257', '#38a156', '#37a055', '#369f54', '#359e53', '#349d53', '#339c52', '#329b51', '#319a50', '#309950', '#2f984f', '#2f974e', '#2e964d', '#2d954d', '#2c944c', '#2b934b', '#2a924a', '#29914a', '#289049', '#278f48', '#268e47', '#258d47', '#248c46', '#238b45', '#228a44', '#218944', '#208843', '#1f8742', '#1e8741', '#1d8640', '#1c8540', '#1a843f', '#19833e', '#18823d', '#17813d', '#16803c', '#157f3b', '#147e3a', '#137d39', '#127c39', '#117b38', '#107a37', '#0e7936', '#0d7836', '#0c7735', '#0b7734', '#0a7633', '#097532', '#087432', '#077331', '#067230', '#05712f', '#03702e', '#026f2e', '#016e2d', '#006d2c', '#006c2c', '#006b2b', '#00692a', '#00682a', '#006729', '#006529', '#006428', '#006328', '#006227', '#006027', '#005f26', '#005e26', '#005c25', '#005b25', '#005a24', '#005924', '#005723', '#005622', '#005522', '#005321', '#005221', '#005120', '#005020', '#004e1f', '#004d1f', '#004c1e', '#004a1e', '#00491d', '#00481d', '#00471c', '#00451c', '#00441b'], 
      'nke_blue': ['#f7fbff', '#f6faff', '#f5fafe', '#f5f9fe', '#f4f9fe', '#f3f8fe', '#f2f8fd', '#f2f7fd', '#f1f7fd', '#f0f6fd', '#eff6fc', '#eef5fc', '#eef5fc', '#edf4fc', '#ecf4fb', '#ebf3fb', '#eaf3fb', '#eaf2fb', '#e9f2fa', '#e8f1fa', '#e7f1fa', '#e7f0fa', '#e6f0f9', '#e5eff9', '#e4eff9', '#e3eef9', '#e3eef8', '#e2edf8', '#e1edf8', '#e0ecf8', '#dfecf7', '#dfebf7', '#deebf7', '#ddeaf7', '#dceaf6', '#dce9f6', '#dbe9f6', '#dae8f6', '#d9e8f5', '#d9e7f5', '#d8e7f5', '#d7e6f5', '#d6e6f4', '#d6e5f4', '#d5e5f4', '#d4e4f4', '#d3e4f3', '#d3e3f3', '#d2e3f3', '#d1e2f3', '#d0e2f2', '#d0e1f2', '#cfe1f2', '#cee0f2', '#cde0f1', '#cddff1', '#ccdff1', '#cbdef1', '#cadef0', '#caddf0', '#c9ddf0', '#c8dcf0', '#c7dcef', '#c7dbef', '#c6dbef', '#c4daee', '#c3daee', '#c2d9ee', '#c1d9ed', '#bfd8ed', '#bed8ec', '#bdd7ec', '#bcd7eb', '#bad6eb', '#b9d6ea', '#b8d5ea', '#b7d4ea', '#b5d4e9', '#b4d3e9', '#b3d3e8', '#b2d2e8', '#b0d2e7', '#afd1e7', '#aed1e7', '#add0e6', '#abd0e6', '#aacfe5', '#a9cfe5', '#a8cee4', '#a6cee4', '#a5cde3', '#a4cce3', '#a3cce3', '#a1cbe2', '#a0cbe2', '#9fcae1', '#9dcae1', '#9cc9e1', '#9ac8e0', '#99c7e0', '#97c6df', '#95c5df', '#94c4df', '#92c4de', '#91c3de', '#8fc2de', '#8dc1dd', '#8cc0dd', '#8abfdd', '#89bedc', '#87bddc', '#85bcdc', '#84bcdb', '#82bbdb', '#81badb', '#7fb9da', '#7db8da', '#7cb7da', '#7ab6d9', '#79b5d9', '#77b5d9', '#75b4d8', '#74b3d8', '#72b2d8', '#71b1d7', '#6fb0d7', '#6dafd7', '#6caed6', '#6aaed6', '#69add5', '#68acd5', '#66abd4', '#65aad4', '#64a9d3', '#63a8d3', '#61a7d2', '#60a7d2', '#5fa6d1', '#5da5d1', '#5ca4d0', '#5ba3d0', '#5aa2cf', '#58a1cf', '#57a0ce', '#56a0ce', '#549fcd', '#539ecd', '#529dcc', '#519ccc', '#4f9bcb', '#4e9acb', '#4d99ca', '#4b98ca', '#4a98c9', '#4997c9', '#4896c8', '#4695c8', '#4594c7', '#4493c7', '#4292c6', '#4191c6', '#4090c5', '#3f8fc5', '#3e8ec4', '#3d8dc4', '#3c8cc3', '#3b8bc2', '#3a8ac2', '#3989c1', '#3888c1', '#3787c0', '#3686c0', '#3585bf', '#3484bf', '#3383be', '#3282be', '#3181bd', '#3080bd', '#2f7fbc', '#2e7ebc', '#2d7dbb', '#2c7cba', '#2b7bba', '#2a7ab9', '#2979b9', '#2777b8', '#2676b8', '#2575b7', '#2474b7', '#2373b6', '#2272b6', '#2171b5', '#2070b4', '#206fb4', '#1f6eb3', '#1e6db2', '#1d6cb1', '#1c6bb0', '#1c6ab0', '#1b69af', '#1a68ae', '#1967ad', '#1966ad', '#1865ac', '#1764ab', '#1663aa', '#1562a9', '#1561a9', '#1460a8', '#135fa7', '#125ea6', '#125da6', '#115ca5', '#105ba4', '#0f5aa3', '#0e59a2', '#0e58a2', '#0d57a1', '#0c56a0', '#0b559f', '#0a549e', '#0a539e', '#09529d', '#08519c', '#08509b', '#084f99', '#084e98', '#084d96', '#084c95', '#084b93', '#084a91', '#084990', '#08488e', '#08478d', '#08468b', '#08458a', '#084488', '#084387', '#084285', '#084184', '#084082', '#083e81', '#083d7f', '#083c7d', '#083b7c', '#083a7a', '#083979', '#083877', '#083776', '#083674', '#083573', '#083471', '#083370', '#08326e', '#08316d', '#08306b'],
      'nke_magenta': ['#ffffff', '#fffeff', '#fefdfe', '#fefcfe', '#fdfbfe', '#fdfafd', '#fdf9fd', '#fcf8fd', '#fcf7fc', '#fcf6fc', '#fbf5fc', '#fbf4fc', '#faf3fb', '#faf2fb', '#faf1fb', '#f9f0fa', '#f9effa', '#f9eefa', '#f8edf9', '#f8ecf9', '#f7ebf9', '#f7eaf8', '#f7e9f8', '#f6e8f8', '#f6e7f7', '#f6e6f7', '#f5e5f7', '#f5e4f7', '#f4e3f6', '#f4e2f6', '#f4e1f6', '#f3e0f5', '#f3dff5', '#f2def5', '#f2ddf4', '#f2dcf4', '#f1dbf4', '#f1daf3', '#f1d9f3', '#f0d8f3', '#f0d7f2', '#efd6f2', '#efd5f2', '#efd4f1', '#eed3f1', '#eed2f1', '#eed1f1', '#edd0f0', '#edcff0', '#eccef0', '#eccdef', '#ecccef', '#ebcbef', '#ebcaee', '#eac9ee', '#eac8ee', '#eac7ed', '#e9c6ed', '#e9c5ed', '#e9c4ec', '#e8c3ec', '#e8c2ec', '#e7c1ec', '#e7c0eb', '#e7bfeb', '#e6beeb', '#e6bdea', '#e6bcea', '#e5bbea', '#e5bae9', '#e4b9e9', '#e4b8e9', '#e4b7e8', '#e3b6e8', '#e3b5e8', '#e2b4e7', '#e2b3e7', '#e2b2e7', '#e1b1e7', '#e1b0e6', '#e1afe6', '#e0aee6', '#e0ade5', '#dface5', '#dfabe5', '#dfaae4', '#dea9e4', '#dea8e4', '#dea7e3', '#dda6e3', '#dda5e3', '#dca4e2', '#dca3e2', '#dca2e2', '#dba1e1', '#dba0e1', '#db9fe1', '#da9ee1', '#da9de0', '#d99ce0', '#d99be0', '#d99adf', '#d899df', '#d898df', '#d797de', '#d796de', '#d795de', '#d694dd', '#d693dd', '#d692dd', '#d591dc', '#d590dc', '#d48fdc', '#d48edc', '#d48ddb', '#d38cdb', '#d38bdb', '#d38ada', '#d289da', '#d288da', '#d187d9', '#d186d9', '#d185d9', '#d084d8', '#d083d8', '#d082d8', '#cf81d7', '#cf80d7', '#ce7fd7', '#ce7ed6', '#ce7dd6', '#cd7cd6', '#cd7bd6', '#cc7ad5', '#cc79d5', '#cc78d5', '#cb77d4', '#cb76d4', '#cb75d4', '#ca74d3', '#ca73d3', '#c972d3', '#c971d2', '#c970d2', '#c86fd2', '#c86ed1', '#c86dd1', '#c76cd1', '#c76bd1', '#c66ad0', '#c669d0', '#c668d0', '#c567cf', '#c566cf', '#c465cf', '#c464ce', '#c463ce', '#c362ce', '#c361cd', '#c360cd', '#c25fcd', '#c25ecc', '#c15dcc', '#c15ccc', '#c15bcc', '#c05acb', '#c059cb', '#c058cb', '#bf57ca', '#bf56ca', '#be55ca', '#be54c9', '#be53c9', '#bd52c9', '#bd51c8', '#bc50c8', '#bc4fc8', '#bc4ec7', '#bb4dc7', '#bb4cc7', '#bb4bc6', '#ba4ac6', '#ba49c6', '#b948c6', '#b947c5', '#b946c5', '#b845c5', '#b844c4', '#b843c4', '#b742c4', '#b741c3', '#b640c3', '#b63fc3', '#b63ec2', '#b53dc2', '#b53cc2', '#b53bc1', '#b43ac1', '#b439c1', '#b338c1', '#b337c0', '#b336c0', '#b235c0', '#b234bf', '#b133bf', '#b132bf', '#b131be', '#b030be', '#b02fbe', '#b02ebd', '#af2dbd', '#af2cbd', '#ae2bbc', '#ae2abc', '#ae29bc', '#ad28bb', '#ad27bb', '#ad26bb', '#ac25bb', '#ac24ba', '#ab23ba', '#ab22ba', '#ab21b9', '#aa20b9', '#aa1fb9', '#aa1eb8', '#a91db8', '#a91cb8', '#a81bb7', '#a81ab7', '#a819b7', '#a718b6', '#a717b6', '#a616b6', '#a615b6', '#a614b5', '#a513b5', '#a512b5', '#a511b4', '#a410b4', '#a40fb4', '#a30eb3', '#a30db3', '#a30cb3', '#a20bb2', '#a20ab2', '#a209b2', '#a108b1', '#a107b1', '#a006b1', '#a005b0', '#a004b0', '#9f03b0', '#9f02b0', '#9e01af', '#9e00af'],
      'nke_purple': ['#ffffff', '#fefeff', '#fefdff', '#fdfcff', '#fcfbff', '#fcfafe', '#fbf9fe', '#fbf8fe', '#faf7fe', '#f9f6fe', '#f9f5fe', '#f8f4fe', '#f7f3fe', '#f7f2fd', '#f6f1fd', '#f5f0fd', '#f5effd', '#f4eefd', '#f4edfd', '#f3ecfd', '#f2ebfd', '#f2eafc', '#f1e9fc', '#f0e8fc', '#f0e7fc', '#efe6fc', '#eee5fc', '#eee4fc', '#ede3fc', '#ede2fb', '#ece1fb', '#ebe0fb', '#ebdffb', '#eadefb', '#e9ddfb', '#e9dcfb', '#e8dbfb', '#e8dafa', '#e7d9fa', '#e6d8fa', '#e6d7fa', '#e5d6fa', '#e4d5fa', '#e4d4fa', '#e3d3fa', '#e2d2fa', '#e2d1f9', '#e1d0f9', '#e1cff9', '#e0cef9', '#dfcdf9', '#dfccf9', '#decbf9', '#ddcaf9', '#ddc9f8', '#dcc8f8', '#dbc7f8', '#dbc6f8', '#dac5f8', '#dac4f8', '#d9c3f8', '#d8c2f8', '#d8c1f7', '#d7c0f7', '#d6bff7', '#d6bef7', '#d5bdf7', '#d4bcf7', '#d4bbf7', '#d3baf7', '#d3b9f6', '#d2b8f6', '#d1b7f6', '#d1b6f6', '#d0b5f6', '#cfb4f6', '#cfb3f6', '#ceb2f6', '#cdb1f5', '#cdb0f5', '#ccaff5', '#ccaef5', '#cbadf5', '#caacf5', '#caabf5', '#c9aaf5', '#c8a9f5', '#c8a8f4', '#c7a7f4', '#c6a6f4', '#c6a5f4', '#c5a4f4', '#c5a3f4', '#c4a2f4', '#c3a1f4', '#c3a0f3', '#c29ff3', '#c19ef3', '#c19df3', '#c09cf3', '#c09bf3', '#bf9af3', '#be99f3', '#be98f2', '#bd97f2', '#bc96f2', '#bc95f2', '#bb94f2', '#ba93f2', '#ba92f2', '#b991f2', '#b990f1', '#b88ff1', '#b78ef1', '#b78df1', '#b68cf1', '#b58bf1', '#b58af1', '#b489f1', '#b388f0', '#b387f0', '#b286f0', '#b285f0', '#b184f0', '#b083f0', '#b082f0', '#af81f0', '#ae80f0', '#ae7fef', '#ad7eef', '#ac7def', '#ac7cef', '#ab7bef', '#ab7aef', '#aa79ef', '#a978ef', '#a977ee', '#a876ee', '#a775ee', '#a774ee', '#a673ee', '#a572ee', '#a571ee', '#a470ee', '#a46fed', '#a36eed', '#a26ded', '#a26ced', '#a16bed', '#a06aed', '#a069ed', '#9f68ed', '#9e67ec', '#9e66ec', '#9d65ec', '#9d64ec', '#9c63ec', '#9b62ec', '#9b61ec', '#9a60ec', '#995feb', '#995eeb', '#985deb', '#975ceb', '#975beb', '#965aeb', '#9659eb', '#9558eb', '#9457eb', '#9456ea', '#9355ea', '#9254ea', '#9253ea', '#9152ea', '#9151ea', '#9050ea', '#8f4fea', '#8f4ee9', '#8e4de9', '#8d4ce9', '#8d4be9', '#8c4ae9', '#8b49e9', '#8b48e9', '#8a47e9', '#8a46e8', '#8945e8', '#8844e8', '#8843e8', '#8742e8', '#8641e8', '#8640e8', '#853fe8', '#843ee7', '#843de7', '#833ce7', '#833be7', '#823ae7', '#8139e7', '#8138e7', '#8037e7', '#7f36e6', '#7f35e6', '#7e34e6', '#7d33e6', '#7d32e6', '#7c31e6', '#7c30e6', '#7b2fe6', '#7a2ee6', '#7a2de5', '#792ce5', '#782be5', '#782ae5', '#7729e5', '#7628e5', '#7627e5', '#7526e5', '#7525e4', '#7424e4', '#7323e4', '#7322e4', '#7221e4', '#7120e4', '#711fe4', '#701ee4', '#6f1de3', '#6f1ce3', '#6e1be3', '#6e1ae3', '#6d19e3', '#6c18e3', '#6c17e3', '#6b16e3', '#6a15e2', '#6a14e2', '#6913e2', '#6912e2', '#6811e2', '#6710e2', '#670fe2', '#660ee2', '#650de1', '#650ce1', '#640be1', '#630ae1', '#6309e1', '#6208e1', '#6207e1', '#6106e1', '#6005e0', '#6004e0', '#5f03e0', '#5e02e0', '#5e01e0', '#5d00e0'], 
      'nke_brown': ['#ffffff', '#fffffe', '#fffefd', '#fefefc', '#fefdfb', '#fefdfa', '#fefcf9', '#fefcf8', '#fefbf7', '#fdfbf6', '#fdfaf5', '#fdfaf4', '#fdf9f3', '#fdf9f2', '#fcf8f1', '#fcf8f0', '#fcf7ef', '#fcf7ee', '#fcf6ed', '#fcf6ec', '#fbf5eb', '#fbf5ea', '#fbf4e9', '#fbf4e8', '#fbf3e7', '#faf3e6', '#faf2e5', '#faf2e4', '#faf1e3', '#faf1e2', '#faf0e1', '#f9f0e0', '#f9efdf', '#f9efde', '#f9eedd', '#f9eedc', '#f9eddb', '#f8edda', '#f8ecd9', '#f8ecd8', '#f8ebd7', '#f8ebd6', '#f7ead5', '#f7ead4', '#f7e9d3', '#f7e9d2', '#f7e8d1', '#f7e8d0', '#f6e7cf', '#f6e7ce', '#f6e6cd', '#f6e6cc', '#f6e5cb', '#f5e5ca', '#f5e4c9', '#f5e4c8', '#f5e3c7', '#f5e3c6', '#f5e2c5', '#f4e2c4', '#f4e1c3', '#f4e1c2', '#f4e0c1', '#f4e0c0', '#f3dfbf', '#f3dfbe', '#f3debd', '#f3debc', '#f3ddbb', '#f3ddba', '#f2dcb9', '#f2dcb8', '#f2dbb7', '#f2dbb6', '#f2dab5', '#f2dab4', '#f1d9b3', '#f1d9b2', '#f1d8b1', '#f1d8b0', '#f1d7af', '#f0d7ae', '#f0d6ad', '#f0d6ac', '#f0d5ab', '#f0d5aa', '#f0d4a9', '#efd4a8', '#efd3a7', '#efd3a6', '#efd2a5', '#efd2a4', '#eed1a3', '#eed1a2', '#eed0a1', '#eed0a0', '#eecf9f', '#eecf9e', '#edce9d', '#edce9c', '#edcd9b', '#edcd9a', '#edcc99', '#eccc98', '#eccb97', '#eccb96', '#ecca95', '#ecca94', '#ecc993', '#ebc992', '#ebc891', '#ebc890', '#ebc78f', '#ebc78e', '#eac68d', '#eac68c', '#eac58b', '#eac58a', '#eac489', '#eac488', '#e9c387', '#e9c386', '#e9c285', '#e9c284', '#e9c183', '#e8c182', '#e8c081', '#e8c080', '#e8bf7f', '#e8bf7e', '#e8be7d', '#e7be7c', '#e7bd7b', '#e7bd7a', '#e7bc79', '#e7bc78', '#e7bb77', '#e6bb76', '#e6ba75', '#e6ba74', '#e6b973', '#e6b972', '#e5b871', '#e5b870', '#e5b76f', '#e5b76e', '#e5b66d', '#e5b66c', '#e4b56b', '#e4b56a', '#e4b469', '#e4b468', '#e4b367', '#e3b366', '#e3b265', '#e3b264', '#e3b163', '#e3b162', '#e3b061', '#e2b060', '#e2af5f', '#e2af5e', '#e2ae5d', '#e2ae5c', '#e1ad5b', '#e1ad5a', '#e1ac59', '#e1ac58', '#e1ab57', '#e1ab56', '#e0aa55', '#e0aa54', '#e0a953', '#e0a952', '#e0a851', '#e0a850', '#dfa74f', '#dfa74e', '#dfa64d', '#dfa64c', '#dfa54b', '#dea54a', '#dea449', '#dea448', '#dea347', '#dea346', '#dea245', '#dda244', '#dda143', '#dda142', '#dda041', '#dda040', '#dc9f3f', '#dc9f3e', '#dc9e3d', '#dc9e3c', '#dc9d3b', '#dc9d3a', '#db9c39', '#db9c38', '#db9b37', '#db9b36', '#db9a35', '#da9a34', '#da9933', '#da9932', '#da9831', '#da9830', '#da972f', '#d9972e', '#d9962d', '#d9962c', '#d9952b', '#d9952a', '#d89429', '#d89428', '#d89327', '#d89326', '#d89225', '#d89224', '#d79123', '#d79122', '#d79021', '#d79020', '#d78f1f', '#d68f1e', '#d68e1d', '#d68e1c', '#d68d1b', '#d68d1a', '#d68c19', '#d58c18', '#d58b17', '#d58b16', '#d58a15', '#d58a14', '#d58913', '#d48912', '#d48811', '#d48810', '#d4870f', '#d4870e', '#d3860d', '#d3860c', '#d3850b', '#d3850a', '#d38409', '#d38408', '#d28307', '#d28306', '#d28205', '#d28204', '#d28203', '#d18102', '#d18101', '#d18000'],
      'nke_pink': ['#CF7593', '#CF7593'],
      'nke_slate': ['#6F8099', '#6F8099'], 
      'nke_crimson': ['#8C4058', '#8C4058'],
      'nke_gold': ['#D8AE54', '#D8AE54'],
      'nke_teal': ['#5AA8A7', '#5AA8A7'],
      'nke_indigo': ['#3A3C7C', '#3A3C7C'], 
      'nke_lobster': ['#FF7B5B', '#FF7B5B'],
      'nke_olive': ['#72662A', '#72662A'],
      'nke_lime': ['#91E580', '#91E580'],
      'nke_sky': ['#BCD5FF', '#BCD5FF'],
      'nke_fuschia': ['#E291DD', '#E291DD'],
      'nke_violet': ['#8B75EA', '#8B75EA'],
      'nke_tan': ['#E0BD84', '#E0BD84'],
      'nke_berry': ['#D64F7C', '#D64F7C'],
      'nke_mint': ['#A4EACA', '#A4EACA'],
      'nke_sun': ['#F4FF6B', '#F4FF6B']
    });

    function ColorMap(min, max, palette, steps) {
      this.min = min;
      this.max = max;
      this.palette = palette != null ? palette : 'hot and cold';
      this.steps = steps != null ? steps : 40;
      this.range = this.max - this.min;
      this.colors = this.setColors(ColorMap.PALETTES[this.palette]);
    }

    ColorMap.prototype.map = function(data) {
      var i, res, _j, _ref;
      res = [];
      for (i = _j = 0, _ref = data.length; 0 <= _ref ? _j < _ref : _j > _ref; i = 0 <= _ref ? ++_j : --_j) {
        res[i] = data[i].map((function(_this) {
          return function(v) {
            return _this.colors[Math.floor(((v - _this.min) / _this.range) * _this.steps)];
          };
        })(this));
      }
      return res;
    };

    ColorMap.prototype.setColors = function(colors) {
      var i, rainbow, _j, _ref;
      rainbow = new Rainbow();
      rainbow.setNumberRange(1, this.steps);
      rainbow.setSpectrum.apply(null, colors);
      colors = [];
      for (i = _j = 1, _ref = this.steps; 1 <= _ref ? _j < _ref : _j > _ref; i = 1 <= _ref ? ++_j : --_j) {
        colors.push(rainbow.colourAt(i));
      }
      return colors.map(function(c) {
        return "#" + c;
      });
    };

    return ColorMap;

  })();

  Component = (function() {
    function Component(container, name, element) {
      this.container = container;
      this.name = name;
      this.element = element;
      $(this.element).change((function(_this) {
        return function(e) {
          return _this.container.settingsChanged();
        };
      })(this));
    }

    Component.prototype.getValue = function() {
      return $(this.element).val();
    };

    Component.prototype.setValue = function(value) {
      return $(this.element).val(value);
    };

    Component.prototype.setEnabled = function(status) {
      status = status ? '' : 'disabled';
      return $(this.element).attr('disabled', status);
    };

    return Component;

  })();

  SliderComponent = (function(_super) {
    __extends(SliderComponent, _super);

    function SliderComponent(container, name, element, orientation, min, max, value, step) {
      this.container = container;
      this.name = name;
      this.element = element;
      this.orientation = orientation;
      this.min = min;
      this.max = max;
      this.value = value;
      this.step = step;
      this.change = __bind(this.change, this);
      this.range = this.name.match(/threshold/g) ? 'max' : this.name.match(/nav/g) ? false : 'min';
      this._jQueryInit();
    }

    SliderComponent.prototype.change = function(e, ui) {
      if (this.name.match(/nav/g)) {
        this.container.navSlideChange(ui.value);
      } else {
        this.container.settingsChanged(e);
      }
      return e.stopPropagation();
    };

    SliderComponent.prototype._jQueryInit = function() {
      return $(this.element).slider({
        orientation: this.orientation,
        range: this.range,
        min: this.min,
        max: this.max,
        step: this.step,
        slide: this.change,
        value: this.value
      });
    };

    SliderComponent.prototype.getValue = function() {
      return $(this.element).slider('value');
    };

    SliderComponent.prototype.setValue = function(value) {
      $(this.element).slider('value', value);
      if (this.textField != null) {
        return this.textField.setValue(value);
      }
    };

    SliderComponent.prototype.setRange = function(min, max) {
      this.min = min;
      this.max = max;
      return $(this.element).slider('option', {
        min: min,
        max: max
      });
    };

    SliderComponent.prototype.attachTextField = function(textField) {
      this.textField = textField;
    };

    return SliderComponent;

  })(Component);

  SelectComponent = (function(_super) {
    __extends(SelectComponent, _super);

    function SelectComponent(container, name, element, options) {
      var o, _i, _len;
      this.container = container;
      this.name = name;
      this.element = element;
      $(this.element).empty();
      for (_i = 0, _len = options.length; _i < _len; _i++) {
        o = options[_i];
        $(this.element).append($('<option></option>').text(o).val(o));
      }
      SelectComponent.__super__.constructor.call(this, this.container, this.name, this.element);
    }

    return SelectComponent;

  })(Component);

  TextFieldComponent = (function(_super) {
    __extends(TextFieldComponent, _super);

    function TextFieldComponent(container, name, element, slider) {
      this.container = container;
      this.name = name;
      this.element = element;
      this.slider = slider != null ? slider : null;
      if (this.slider != null) {
        this.setValue(this.slider.getValue());
        $(this.element).change((function(_this) {
          return function(e) {
            var v;
            v = _this.getValue();
            if ($.isNumeric(v)) {
              if (v < _this.slider.min) {
                v = _this.slider.min;
              } else if (v > _this.slider.max) {
                v = _this.slider.max;
              }
              _this.setValue(v);
              _this.slider.setValue(v);
              return _this.container.settingsChanged(e);
            }
          };
        })(this));
        $(this.slider.element).on('slide', (function(_this) {
          return function(e) {
            _this.setValue(_this.slider.getValue());
            return e.stopPropagation();
          };
        })(this));
      }
    }

    TextFieldComponent.prototype.setValue = function(value) {
      $(this.element).val(value);
      return $(this.element).text(value);
    };

    return TextFieldComponent;

  })(Component);

  DataField = (function() {
    function DataField(panel, name, element) {
      this.panel = panel;
      this.name = name;
      this.element = element;
    }

    return DataField;

  })();

  componentToHex = function(c) {
    var hex;
    hex = c.toString(16);
    if (hex.length === 1) {
      return "0" + hex;
    } else {
      return hex;
    }
  };

  rgbToHex = function(r, g, b) {
    return "#" + componentToHex(r) + componentToHex(g) + componentToHex(b);
  };

  hexToRgb = function(hex) {
    var result;
    result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
    if (result) {
      return {
        r: parseInt(result[1], 16),
        g: parseInt(result[2], 16),
        b: parseInt(result[3], 16)
      };
    } else {
      return null;
    }
  };

}).call(this);