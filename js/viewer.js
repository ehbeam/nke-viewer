// Generated by CoffeeScript 1.7.1
(function() {
  var ColorMap, Component, Crosshairs, DataField, DataPanel, Image, Layer, LayerList, SelectComponent, SliderComponent, TextFieldComponent, Threshold, Transform, UserInterface, View, ViewSettings, Viewer, componentToHex, hexToRgb, rgbToHex,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  window.Viewer || (window.Viewer = {});

  var names = { 
                2: ['Arousal', 'Manipulation'],
                3: ['Arousal', 'Manipulation', 'Language'],
                4: ['Memory', 'Arousal', 'Vision', 'Hearing'],
                5: ['Memory', 'Reward', 'Cognition', 'Vision', 'Hearing'],
                6: ['Memory', 'Reward', 'Cognition', 'Vision', 'Manipulation', 'Language'],
                7: ['Memory', 'Emotion', 'Reward', 'Reaction Time', 'Vision', 'Manipulation', 'Hearing'],
                8: ['Memory', 'Emotion', 'Reward', 'Cognition', 'Vision', 'Manipulation', 'Hearing', 'Language'],
                9: ['Memory', 'Episodic Memory', 'Reward', 'Cognition', 'Vision', 'Manipulation', 'Execution', 'Hearing', 'Language'],
                10: ['Memory', 'Episodic Memory', 'Emotion', 'Reward', 'Cognition', 'Vision', 'Manipulation', 'Execution', 'Hearing', 'Language'],
                11: ['Memory', 'Episodic Memory', 'Emotion', 'Reward', 'Arousal', 'Reaction Time', 'Vision', 'Manipulation', 'Perception', 'Language', 'Word'],
                12: ['Memory', 'Episodic Memory', 'Emotion', 'Reward', 'Anticipation', 'Reaction Time', 'Representation', 'Vision', 'Manipulation', 'Execution', 'Hearing', 'Language'],
                13: ['Memory', 'Recognition', 'Retrieval', 'Emotion', 'Reward', 'Arousal', 'Anticipation', 'Cognition', 'Vision', 'Manipulation', 'Execution', 'Hearing', 'Language'],
                14: ['Memory', 'Episodic Memory', 'Retrieval', 'Emotion', 'Valence', 'Reward', 'Reaction Time', 'Cognition', 'Vision', 'Manipulation', 'Execution', 'Language', 'Word', 'Meaning'],
                15: ['Memory', 'Episodic Memory', 'Recall', 'Emotion', 'Reward', 'Decision Making', 'Arousal', 'Cognition', 'Vision', 'Manipulation', 'Execution', 'Hearing', 'Language', 'Word', 'Meaning'],
                16: ['Memory', 'Episodic Memory', 'Retrieval', 'Emotion', 'Valence', 'Reward', 'Decision Making', 'Arousal', 'Anticipation', 'Cognition', 'Vision', 'Manipulation', 'Execution', 'Hearing', 'Language', 'Word'],
                17: ['Memory', 'Episodic Memory', 'Recall', 'Retrieval', 'Emotion', 'Fear', 'Reward', 'Decision Making', 'Arousal', 'Cognition', 'Vision', 'Manipulation', 'Execution', 'Hand', 'Perception', 'Hearing', 'Meaning'],
                18: ['Memory', 'Episodic Memory', 'Recognition', 'Recall', 'Retrieval', 'Emotion', 'Reward', 'Decision Making', 'Arousal', 'Cognition', 'Cognitive Process', 'Vision', 'Manipulation', 'Execution', 'Perception', 'Hearing', 'Word', 'Meaning'],
                19: ['Memory', 'Episodic Memory', 'Recall', 'Retrieval', 'Emotion', 'Fear', 'Reward', 'Decision Making', 'Arousal', 'Reaction Time', 'Cognition', 'Vision', 'Manipulation', 'Execution', 'Hearing', 'Language', 'Word', 'Meaning', 'Speech'],
                20: ['Memory', 'Episodic Memory', 'Recognition', 'Familiarity', 'Recall', 'Retrieval', 'Emotion', 'Fear', 'Reward', 'Arousal', 'Anticipation', 'Cognition', 'Cognitive Process', 'Vision', 'Manipulation', 'Execution', 'Perception', 'Hearing', 'Language', 'Word'],
                21: ['Memory', 'Episodic Memory', 'Recall', 'Retrieval', 'Emotion', 'Valence', 'Reward', 'Decision Making', 'Arousal', 'Salience', 'Anticipation', 'Cognition', 'Cognitive Process', 'Vision', 'Manipulation', 'Execution', 'Movement', 'Motor Control', 'Perception', 'Hearing', 'Meaning'],
                22: ['Memory', 'Episodic Memory', 'Encoding', 'Recall', 'Retrieval', 'Emotion', 'Reward', 'Decision Making', 'Arousal', 'Salience', 'Anticipation', 'Reaction Time', 'Cognition', 'Context', 'Vision', 'Manipulation', 'Execution', 'Hand', 'Hearing', 'Language', 'Word', 'Meaning'],
                23: ['Memory', 'Episodic Memory', 'Recognition', 'Recall', 'Retrieval', 'Emotion', 'Reward', 'Decision Making', 'Arousal', 'Salience', 'Anticipation', 'Cognition', 'Thought', 'Feedback', 'Vision', 'Manipulation', 'Execution', 'Movement', 'Hand', 'Perception', 'Hearing', 'Language', 'Meaning'],
                24: ['Memory', 'Episodic Memory', 'Encoding', 'Recall', 'Retrieval', 'Emotion', 'Loss', 'Reward', 'Decision Making', 'Arousal', 'Anticipation', 'Social Cognition', 'Cognition', 'Thought', 'Representation', 'Feedback', 'Vision', 'Manipulation', 'Execution', 'Perception', 'Language', 'Word', 'Meaning', 'Speech'],
                25: ['Memory', 'Episodic Memory', 'Encoding', 'Recall', 'Retrieval', 'Emotion', 'Reward', 'Decision Making', 'Arousal', 'Salience', 'Anticipation', 'Cognition', 'Feedback', 'Vision', 'Eye', 'Manipulation', 'Execution', 'Movement', 'Perception', 'Pain', 'Hearing', 'Language', 'Word', 'Meaning', 'Speech'],
                26: ['Memory', 'Episodic Memory', 'Encoding', 'Familiarity', 'Recall', 'Retrieval', 'Emotion', 'Loss', 'Reward', 'Decision Making', 'Arousal', 'Salience', 'Anticipation', 'Social Cognition', 'Cognition', 'Cognitive Process', 'Vision', 'Manipulation', 'Execution', 'Movement', 'Rest', 'Hearing', 'Language', 'Word', 'Meaning', 'Semantic Processing'],
                27: ['Memory', 'Episodic Memory', 'Encoding', 'Recognition', 'Familiarity', 'Recall', 'Retrieval', 'Emotion', 'Reward', 'Decision Making', 'Arousal', 'Salience', 'Anticipation', 'Cognition', 'Cognitive Process', 'Attention', 'Context', 'Feedback', 'Vision', 'Manipulation', 'Execution', 'Perception', 'Pain', 'Hearing', 'Language', 'Word', 'Meaning'],
                28: ['Memory', 'Episodic Memory', 'Encoding', 'Familiarity', 'Recall', 'Retrieval', 'Remembering', 'Emotion', 'Valence', 'Loss', 'Reward', 'Decision Making', 'Arousal', 'Anticipation', 'Reaction Time', 'Cognition', 'Thought', 'Vision', 'Manipulation', 'Execution', 'Movement', 'Motor Control', 'Coordination', 'Perception', 'Hearing', 'Language', 'Meaning', 'Speech'],
                29: ['Memory', 'Episodic Memory', 'Encoding', 'Recognition', 'Familiarity', 'Recall', 'Retrieval', 'Emotion', 'Mood', 'Loss', 'Reward', 'Decision Making', 'Arousal', 'Anticipation', 'Cognition', 'Thought', 'Representation', 'Preparation', 'Feedback', 'Vision', 'Manipulation', 'Execution', 'Hand', 'Hearing', 'Language', 'Language Processing', 'Word', 'Meaning', 'Semantic Processing'],
                30: ['Memory', 'Episodic Memory', 'Encoding', 'Recall', 'Retrieval', 'Emotion', 'Valence', 'Reward', 'Decision Making', 'Arousal', 'Salience', 'Anticipation', 'Social Cognition', 'Cognition', 'Cognitive Process', 'Attention', 'Feedback', 'Vision', 'Manipulation', 'Execution', 'Movement', 'Motor Control', 'Hand', 'Pain', 'Hearing', 'Language', 'Word', 'Meaning', 'Semantic Processing', 'Speech'],
                31: ['Memory', 'Episodic Memory', 'Encoding', 'Recognition', 'Recall', 'Retrieval', 'Remembering', 'Emotion', 'Loss', 'Reward', 'Decision Making', 'Arousal', 'Salience', 'Anticipation', 'Cognition', 'Thought', 'Attention', 'Representation', 'Preparation', 'Vision', 'Manipulation', 'Execution', 'Movement', 'Motor Control', 'Perception', 'Pain', 'Hearing', 'Language', 'Word', 'Meaning', 'Semantic Processing'],
                32: ['Memory', 'Episodic Memory', 'Encoding', 'Familiarity', 'Recall', 'Retrieval', 'Remembering', 'Emotion', 'Mood', 'Loss', 'Reward', 'Decision Making', 'Arousal', 'Salience', 'Anticipation', 'Social Cognition', 'Cognitive Process', 'Thought', 'Attention', 'Vision', 'Eye', 'Manipulation', 'Execution', 'Movement', 'Motor Control', 'Perception', 'Hearing', 'Language', 'Word', 'Meaning', 'Semantic Memory', 'Speech'],
                33: ['Memory', 'Episodic Memory', 'Encoding', 'Recognition', 'Familiarity', 'Recall', 'Retrieval', 'Emotion', 'Fear', 'Reward', 'Decision Making', 'Arousal', 'Salience', 'Anticipation', 'Social Cognition', 'Reaction Time', 'Cognition', 'Cognitive Process', 'Monitoring', 'Feedback', 'Vision', 'Eye', 'Manipulation', 'Execution', 'Movement', 'Motor Control', 'Hand', 'Perception', 'Hearing', 'Language', 'Word', 'Meaning', 'Speech'],
                34: ['Memory', 'Episodic Memory', 'Encoding', 'Recognition', 'Familiarity', 'Recall', 'Retrieval', 'Emotion', 'Mood', 'Loss', 'Reward', 'Reward Processing', 'Decision Making', 'Arousal', 'Salience', 'Anticipation', 'Social Cognition', 'Cognition', 'Cognitive Process', 'Representation', 'Feedback', 'Vision', 'Manipulation', 'Execution', 'Movement', 'Motor Control', 'Pain', 'Hearing', 'Listening', 'Language', 'Language Processing', 'Word', 'Meaning', 'Speech'],
                35: ['Memory', 'Episodic Memory', 'Encoding', 'Recognition', 'Familiarity', 'Recall', 'Retrieval', 'Emotion', 'Mood', 'Loss', 'Reward', 'Reward Processing', 'Decision Making', 'Arousal', 'Anticipation', 'Social Cognition', 'Cognition', 'Cognitive Process', 'Cognitive Control', 'Thought', 'Preparation', 'Feedback', 'Vision', 'Eye', 'Manipulation', 'Execution', 'Movement', 'Motor Control', 'Perception', 'Pain', 'Hearing', 'Language', 'Language Processing', 'Meaning', 'Speech'],
                36: ['Memory', 'Episodic Memory', 'Encoding', 'Familiarity', 'Recall', 'Retrieval', 'Emotion', 'Mood', 'Fear', 'Loss', 'Reward', 'Reward Processing', 'Decision Making', 'Arousal', 'Salience', 'Anticipation', 'Reaction Time', 'Cognition', 'Cognitive Process', 'Cognitive Control', 'Thought', 'Attention', 'Feedback', 'Vision', 'Manipulation', 'Execution', 'Movement', 'Motor Control', 'Hand', 'Perception', 'Pain', 'Hearing', 'Language', 'Word', 'Meaning', 'Speech'],
                37: ['Memory', 'Episodic Memory', 'Encoding', 'Recognition', 'Familiarity', 'Recall', 'Retrieval', 'Remembering', 'Emotion', 'Mood', 'Fear', 'Reward', 'Reward Processing', 'Decision Making', 'Arousal', 'Salience', 'Anticipation', 'Social Cognition', 'Reaction Time', 'Cognition', 'Cognitive Process', 'Thought', 'Feedback', 'Vision', 'Manipulation', 'Execution', 'Movement', 'Motor Control', 'Coordination', 'Perception', 'Pain', 'Hearing', 'Language', 'Word', 'Meaning', 'Semantic Processing', 'Naming'],
                38: ['Memory', 'Episodic Memory', 'Encoding', 'Recognition', 'Familiarity', 'Recall', 'Retrieval', 'Emotion', 'Valence', 'Loss', 'Reward', 'Reward Processing', 'Decision Making', 'Arousal', 'Salience', 'Anticipation', 'Social Cognition', 'Cognition', 'Cognitive Process', 'Thought', 'Representation', 'Monitoring', 'Vision', 'Eye', 'Manipulation', 'Execution', 'Movement', 'Motor Control', 'Rest', 'Perception', 'Heat', 'Pain', 'Hearing', 'Language', 'Word', 'Meaning', 'Semantic Processing', 'Speech'],
                39: ['Memory', 'Episodic Memory', 'Encoding', 'Recognition', 'Familiarity', 'Recall', 'Retrieval', 'Emotion', 'Mood', 'Valence', 'Fear', 'Loss', 'Reward', 'Reward Processing', 'Decision Making', 'Arousal', 'Salience', 'Anticipation', 'Reaction Time', 'Cognition', 'Cognitive Process', 'Thought', 'Attention', 'Working Memory', 'Representation', 'Feedback', 'Vision', 'Manipulation', 'Execution', 'Movement', 'Motor Control', 'Hand', 'Perception', 'Hearing', 'Language', 'Language Processing', 'Meaning', 'Speech', 'DSM-IV'],
                40: ['Memory', 'Episodic Memory', 'Encoding', 'Recognition', 'Recognition Memory', 'Familiarity', 'Recall', 'Retrieval', 'Remembering', 'Emotion', 'Mood', 'Valence', 'Negative Emotion', 'Fear', 'Loss', 'Reward', 'Reward Processing', 'Decision Making', 'Arousal', 'Salience', 'Anticipation', 'Social Cognition', 'Cognition', 'Thought', 'Preparation', 'Feedback', 'Vision', 'Manipulation', 'Execution', 'Movement', 'Motor Control', 'Face', 'Perception', 'Hearing', 'Listening', 'Language', 'Language Processing', 'Word', 'Meaning', 'Speech'],
                41: ['Memory', 'Episodic Memory', 'Encoding', 'Recognition', 'Familiarity', 'Recall', 'Retrieval', 'Remembering', 'Emotion', 'Mood', 'Valence', 'Fear', 'Loss', 'Reward', 'Decision Making', 'Arousal', 'Salience', 'Anticipation', 'Social Cognition', 'Reaction Time', 'Cognition', 'Cognitive Process', 'Thought', 'Representation', 'Planning', 'Feedback', 'Vision', 'Manipulation', 'Execution', 'Movement', 'Hand', 'Face', 'Rest', 'Perception', 'Hearing', 'Tone', 'Language', 'Word', 'Meaning', 'Semantic Processing', 'Speech'],
                42: ['Memory', 'Episodic Memory', 'Encoding', 'Recognition', 'Familiarity', 'Recall', 'Retrieval', 'Remembering', 'Emotion', 'Mood', 'Valence', 'Fear', 'Reward', 'Reward Processing', 'Decision Making', 'Arousal', 'Salience', 'Anticipation', 'Social Cognition', 'Reaction Time', 'Cognition', 'Cognitive Process', 'Thought', 'Working Memory', 'Feedback', 'Vision', 'Manipulation', 'Execution', 'Movement', 'Motor Control', 'Hand', 'Arm', 'Perception', 'Pain', 'Hearing', 'Listening', 'Language', 'Word', 'Meaning', 'Semantic Processing', 'Semantic Memory', 'Speech'],
                43: ['Memory', 'Episodic Memory', 'Encoding', 'Recognition', 'Familiarity', 'Recall', 'Retrieval', 'Emotion', 'Mood', 'Valence', 'Loss', 'Reward', 'Reward Processing', 'Decision Making', 'Arousal', 'Salience', 'Anticipation', 'Expectancy', 'Social Cognition', 'Reaction Time', 'Cognition', 'Cognitive Process', 'Thought', 'Working Memory', 'Representation', 'Feedback', 'Vision', 'Manipulation', 'Execution', 'Movement', 'Motor Control', 'Hand', 'Pain', 'Hearing', 'Language', 'Language Processing', 'Word', 'Meaning', 'Semantic Processing', 'Semantic Memory', 'Naming', 'Speech', 'Reading'],
                44: ['Memory', 'Episodic Memory', 'Encoding', 'Recognition', 'Recognition Memory', 'Familiarity', 'Recall', 'Retrieval', 'Remembering', 'Emotion', 'Mood', 'Valence', 'Fear', 'Loss', 'Reward', 'Reward Processing', 'Decision Making', 'Arousal', 'Salience', 'Anticipation', 'Expectancy', 'Social Cognition', 'Theory of Mind', 'Cognition', 'Cognitive Process', 'Representation', 'Preparation', 'Feedback', 'Vision', 'Manipulation', 'Execution', 'Movement', 'Motor Control', 'Hand', 'Perception', 'Pain', 'Hearing', 'Listening', 'Language', 'Language Processing', 'Word', 'Meaning', 'Semantic Processing', 'Speech'],
                45: ['Memory', 'Episodic Memory', 'Encoding', 'Recognition', 'Familiarity', 'Recall', 'Retrieval', 'Remembering', 'Emotion', 'Mood', 'Valence', 'Negative Emotion', 'Fear', 'Loss', 'Reward', 'Reward Processing', 'Decision Making', 'Addiction', 'Arousal', 'Anticipation', 'Expectancy', 'Social Cognition', 'Reaction Time', 'Cognition', 'Cognitive Process', 'Cognitive Control', 'Thought', 'Representation', 'Strategy', 'Preparation', 'Feedback', 'Vision', 'Manipulation', 'Execution', 'Movement', 'Motor Control', 'Hand', 'Perception', 'Hearing', 'Language', 'Language Processing', 'Word', 'Meaning', 'Semantic Processing', 'Speech'],
                46: ['Memory', 'Episodic Memory', 'Encoding', 'Recognition', 'Recognition Memory', 'Familiarity', 'Recall', 'Retrieval', 'Memory Retrieval', 'Remembering', 'Emotion', 'Mood', 'Valence', 'Fear', 'Anger', 'Loss', 'Reward', 'Reward Processing', 'Decision Making', 'Arousal', 'Anticipation', 'Expectancy', 'Reaction Time', 'Cognition', 'Cognitive Process', 'Thought', 'Representation', 'Preparation', 'Feedback', 'Vision', 'Eye', 'Manipulation', 'Execution', 'Movement', 'Motor Control', 'Coordination', 'Hand', 'Perception', 'Hearing', 'Language', 'Language Processing', 'Word', 'Meaning', 'Semantic Processing', 'Speech', 'Reading'],
                47: ['Memory', 'Episodic Memory', 'Encoding', 'Recognition', 'Recognition Memory', 'Familiarity', 'Recall', 'Retrieval', 'Remembering', 'Emotion', 'Mood', 'Valence', 'Fear', 'Loss', 'Reward', 'Reward Anticipation', 'Reward Processing', 'Decision Making', 'Arousal', 'Salience', 'Anticipation', 'Expectancy', 'Social Cognition', 'Reaction Time', 'Cognition', 'Cognitive Process', 'Cognitive Control', 'Thought', 'Representation', 'Feedback', 'Vision', 'Picture', 'Manipulation', 'Execution', 'Movement', 'Motor Control', 'Hand', 'Arm', 'Perception', 'Hearing', 'Listening', 'Language', 'Language Processing', 'Word', 'Meaning', 'Semantic Processing', 'Speech'],
                48: ['Memory', 'Episodic Memory', 'Encoding', 'Recognition', 'Recognition Memory', 'Familiarity', 'Recall', 'Retrieval', 'Remembering', 'Emotion', 'Mood', 'Valence', 'Fear', 'Loss', 'Reward', 'Reward Processing', 'Decision Making', 'Addiction', 'Arousal', 'Anticipation', 'Expectancy', 'Social Cognition', 'Theory of Mind', 'Cognition', 'Cognitive Process', 'Thought', 'Attention', 'Representation', 'Preparation', 'Feedback', 'Learning', 'Vision', 'Manipulation', 'Execution', 'Movement', 'Motor Control', 'Hand', 'Perception', 'Pain', 'Hearing', 'Listening', 'Language', 'Language Processing', 'Word', 'Meaning', 'Semantic Processing', 'Semantic Memory', 'Speech'],
                49: ['Memory', 'Episodic Memory', 'Encoding', 'Recognition', 'Recognition Memory', 'Familiarity', 'Recall', 'Retrieval', 'Memory Retrieval', 'Remembering', 'Emotion', 'Mood', 'Valence', 'Negative Emotion', 'Fear', 'Loss', 'Reward', 'Reward Processing', 'Decision Making', 'Arousal', 'Salience', 'Anticipation', 'Expectancy', 'Reaction Time', 'Cognition', 'Cognitive Process', 'Thought', 'Attention', 'Working Memory', 'Representation', 'Feedback', 'Vision', 'Eye', 'Manipulation', 'Execution', 'Movement', 'Motor Control', 'Skill', 'Hand', 'Perception', 'Hearing', 'Listening', 'Language', 'Language Processing', 'Word', 'Meaning', 'Semantic Processing', 'Semantic Memory', 'Speech'],
                50: ['Memory', 'Episodic Memory', 'Encoding', 'Recognition', 'Recognition Memory', 'Familiarity', 'Recall', 'Retrieval', 'Memory Retrieval', 'Remembering', 'Emotion', 'Mood', 'Valence', 'Negative Emotion', 'Fear', 'Loss', 'Reward', 'Reward Processing', 'Decision Making', 'Arousal', 'Salience', 'Anticipation', 'Expectancy', 'Reaction Time', 'Cognition', 'Cognitive Process', 'Thought', 'Attention', 'Working Memory', 'Representation', 'Feedback', 'Vision', 'Eye', 'Manipulation', 'Execution', 'Movement', 'Motor Control', 'Skill', 'Hand', 'Perception', 'Hearing', 'Listening', 'Language', 'Language Processing', 'Word', 'Meaning', 'Semantic Processing', 'Semantic Memory', 'Naming', 'Speech']
              }

  /* VARIOUS HELPFUL FUNCTIONS */

  window.typeIsArray = Array.isArray || function(value) {
    return {}.toString.call(value) === '[object Array]';
  };

  Array.prototype.diff = function(a) {
    return this.filter(function(i) {
      return !(a.indexOf(i) > -1);
    });
  };

  window.Viewer = Viewer = (function() {
    Viewer.AXIAL = 2;

    Viewer.CORONAL = 1;

    Viewer.SAGITTAL = 0;

    Viewer.XAXIS = 0;

    Viewer.YAXIS = 1;

    Viewer.ZAXIS = 2;

    function Viewer(layerListId, layerSettingClass, cache, options) {
      var xyz;
      this.cache = cache != null ? cache : true;
      if (options == null) {
        options = {};
      }
      xyz = 'xyz' in options ? options.xyz : [0.0, 0.0, 0.0];
      this.coords_ijk = Transform.atlasToImage(xyz);
      this.coords_abc = Transform.atlasToViewer(xyz);
      this.viewSettings = new ViewSettings(options);
      this.views = [];
      this.sliders = {};
      this.dataPanel = new DataPanel(this);
      this.layerList = new LayerList();
      this.userInterface = new UserInterface(this, layerListId, layerSettingClass);
      if (this.cache && (typeof amplify !== "undefined" && amplify !== null)) {
        this.cache = amplify.store;
      }
    }

    Viewer.prototype.coords_xyz = function() {
      return Transform.imageToAtlas(this.coords_ijk);
    };

    Viewer.prototype.paint = function() {
      var l, v, _i, _j, _len, _len1, _ref, _ref1;
      $(this).trigger("beforePaint");
      if (this.layerList.activeLayer) {
        this.userInterface.updateThresholdSliders(this.layerList.activeLayer.image);
        this.updateDataDisplay();
      }
      _ref = this.views;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        v = _ref[_i];
        v.clear();
        // _ref1 = this.layerList.layers.slice(0).reverse();
        _ref1 = this.layerList.layers.slice(0);
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          l = _ref1[_j];
          if (l.visible) {
            v.paint(l);
          }
        }
        v.drawCrosshairs();
        v.drawLabels();
      }
      $(this).trigger("beforePaint");
      return true;
    };

    Viewer.prototype.clear = function() {
      var v, _i, _len, _ref, _results;
      _ref = this.views;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        v = _ref[_i];
        _results.push(v.clear());
      }
      return _results;
    };

    Viewer.prototype.resetCanvas = function() {
      var v, _i, _len, _ref, _results;
      _ref = this.views;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        v = _ref[_i];
        _results.push(v.resetCanvas());
      }
      return _results;
    };

    Viewer.prototype.addView = function(element, dim, index, labels) {
      if (labels == null) {
        labels = true;
      }
      return this.views.push(new View(this, this.viewSettings, element, dim, index, labels));
    };

    Viewer.prototype.addSlider = function(name, element, orientation, min, max, value, step, dim, textField) {
      var v, views, _i, _len, _results;
      if (dim == null) {
        dim = null;
      }
      if (textField == null) {
        textField = null;
      }
      if (name.match(/nav/)) {
        views = (function() {
          var _i, _len, _ref, _results;
          _ref = this.views;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            v = _ref[_i];
            if (v.dim === dim) {
              _results.push(v);
            }
          }
          return _results;
        }).call(this);
        _results = [];
        for (_i = 0, _len = views.length; _i < _len; _i++) {
          v = views[_i];
          _results.push(v.addSlider(name, element, orientation, min, max, value, step, textField));
        }
        return _results;
      } else {
        return this.userInterface.addSlider(name, element, orientation, min, max, value, step, textField);
      }
    };

    Viewer.prototype.addTextField = function(name, element) {
      return this.userInterface.addTextField(name, element);
    };

    Viewer.prototype.addDataField = function(name, element) {
      return this.dataPanel.addDataField(name, element);
    };

    Viewer.prototype.addAxisPositionField = function(name, element, dim) {
      return this.dataPanel.addAxisPositionField(name, element, dim);
    };

    Viewer.prototype.addColorSelect = function(element) {
      return this.userInterface.addColorSelect(element);
    };

    Viewer.prototype.addSignSelect = function(element) {
      return this.userInterface.addSignSelect(element);
    };

    Viewer.prototype.addSettingsCheckboxes = function(element, options) {
      var o, settings, _i, _len;
      if (options === 'standard') {
        options = ['crosshairs', 'panzoom', 'labels'];
      }
      settings = {};
      options = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = options.length; _i < _len; _i++) {
          o = options[_i];
          if (o === 'crosshairs' || o === 'panzoom' || o === 'labels') {
            _results.push(o);
          }
        }
        return _results;
      })();
      for (_i = 0, _len = options.length; _i < _len; _i++) {
        o = options[_i];
        settings[o] = this.viewSettings[o + 'Enabled'];
      }
      return this.userInterface.addSettingsCheckboxes(element, settings);
    };

    Viewer.prototype._loadImage = function(data, options) {
      var error, layer;
      layer = new Layer(new Image(data), options);
      this.layerList.addLayer(layer);
      try {
        if (this.cache && options.cache) {
          return amplify.store(layer.name, data);
        }
      } catch (_error) {
        error = _error;
        return "";
      }
    };

    Viewer.prototype._loadImageFromJSON = function(options) {
      return $.getJSON(options.url, (function(_this) {
        return function(data) {
          return _this._loadImage(data, options);
        };
      })(this));
    };

    Viewer.prototype._loadImageFromVolume = function(options) {
      var dfd, r, v;
      dfd = $.Deferred();
      $('body').append("<div id='xtk_tmp' style='display: none;'></div>");
      r = new X.renderer2D();
      r.container = 'xtk_tmp';
      r.orientation = 'X';
      r.init();
      r.interactor.config.KEYBOARD_ENABLED = false;
      r.interactor.config.MOUSECLICKS_ENABLED = false;
      r.interactor.config.MOUSEWHEEL_ENABLED = false;
      r.interactor.init();
      v = new X.volume();
      v.file = options.url += ['&ext=', '?'][+(options.url.indexOf('?') === -1)] + '.nii.gz';
      r.add(v);
      r.render();
      r.onShowtime = (function(_this) {
        return function() {
          var data;
          r.destroy();
          data = {
            data3d: v.image,
            dims: v.dimensions
          };
          _this._loadImage(data, options);
          $('#xtk_tmp').remove();
          return dfd.resolve('Finished loading from volume');
        };
      })(this);
      return dfd.promise();
    };

    Viewer.prototype.loadImages = function(images, activate, assignColors) {
      var ajaxReqs, data, existingLayers, img, _i, _len;
      if (activate == null) {
        activate = null;
      }
      if (assignColors == null) {
        assignColors = true;
      }

      /* Load one or more images. If activate is an integer, activate the layer at that 
      index. Otherwise activate the last layer in the list by default. When assignColors 
      is true, viewer will load each image with the next available color palette unless 
      color is explicitly specified.
       */
      if (!typeIsArray(images)) {
        images = [images];
      }
      ajaxReqs = [];
      existingLayers = this.layerList.getLayerNames();
      images = (function() {
        var _i, _len, _ref, _results;
        _results = [];
        for (_i = 0, _len = images.length; _i < _len; _i++) {
          img = images[_i];
          if (_ref = img.name, __indexOf.call(existingLayers, _ref) < 0) {
            _results.push(img);
          }
        }
        return _results;
      })();
      for (_i = 0, _len = images.length; _i < _len; _i++) {
        img = images[_i];
        if (assignColors && (img.colorPalette == null)) {
          img.colorPalette = this.layerList.getNextColor();
        }
        if ((data = img.data) || (this.cache && (data = this.cache(img.name)))) {
          this._loadImage(data, img);
        } else if (img.url.match(/\.json$/) || img.json) {
          ajaxReqs.push(this._loadImageFromJSON(img));
        } else {
          ajaxReqs.push(this._loadImageFromVolume(img));
        }
      }
      return $.when.apply($, ajaxReqs).then((function(_this) {
        return function() {
          var i, order;
          order = (function() {
            var _j, _len1, _results;
            _results = [];
            for (_j = 0, _len1 = images.length; _j < _len1; _j++) {
              i = images[_j];
              _results.push(i.name);
            }
            return _results;
          })();
          // _this.sortLayers(order.reverse());
          _this.sortLayers(order);
          _this.selectLayer(activate != null ? activate : activate = 0);
          _this.updateUserInterface();
          return $(_this).trigger('imagesLoaded');
        };
      })(this));
    };

    Viewer.prototype.clearImages = function() {
      this.layerList.clearLayers();
      this.updateUserInterface();
      this.clear();
      return $(this).trigger('imagesCleared');
    };

    Viewer.prototype.downloadImage = function(index) {
      var url;
      url = this.layerList.layers[index].download;
      if (url) {
        return window.location.replace(url);
      }
    };

    Viewer.prototype.selectLayer = function(index) {
      this.layerList.activateLayer(index);
      this.userInterface.updateLayerSelection(this.layerList.getActiveIndex());
      this.updateDataDisplay();
      this.userInterface.updateThresholdSliders(this.layerList.activeLayer.image);
      this.userInterface.updateComponents(this.layerList.activeLayer.getSettings());
      return $(this).trigger('layerSelected', this.layerList.activeLayer);
    };

    Viewer.prototype.deleteLayer = function(target) {
      this.layerList.deleteLayer(target);
      this.updateUserInterface();
      return $(this).trigger('layerDeleted');
    };

    Viewer.prototype.toggleLayer = function(index) {
      this.layerList.layers[index].toggle();
      this.userInterface.updateLayerVisibility(this.layerList.getLayerVisibilities());
      this.paint();
      return $(this).trigger('layerToggled');
    };

    Viewer.prototype.sortLayers = function(layers, paint) {
      if (paint == null) {
        paint = false;
      }
      this.layerList.sortLayers(layers);
      this.userInterface.updateLayerVisibility(this.layerList.getLayerVisibilities());
      if (paint) {
        return this.paint();
      }
    };

    Viewer.prototype.updateUserInterface = function() {
      this.userInterface.updateLayerList(this.layerList.layers, this.layerList.getActiveIndex());
      this.userInterface.updateLayerVisibility(this.layerList.getLayerVisibilities());
      this.userInterface.updateLayerSelection(this.layerList.getActiveIndex());
      if (this.layerList.activeLayer != null) {
        this.userInterface.updateComponents(this.layerList.activeLayer.getSettings());
      }
      return this.paint();
    };

    Viewer.prototype.updateSettings = function(settings) {
      this.layerList.updateActiveLayer(settings);
      return this.paint();
    };

    Viewer.prototype.updateDataDisplay = function() {
      var currentCoords, data;
      currentCoords = Transform.imageToAtlas(this.coords_ijk.slice(0)).join(', ');
      data = {
        voxelValue: this.getValue(),
        currentCoords: currentCoords
      };
      return this.dataPanel.update(data);
    };

    Viewer.prototype.updateViewSettings = function(options, paint) {
      if (paint == null) {
        paint = false;
      }
      this.viewSettings.updateSettings(options);
      if (paint) {
        return this.paint();
      }
    };

    Viewer.prototype.moveToViewerCoords = function(dim, cx, cy) {
      var cxyz;
      if (cy == null) {
        cy = null;
      }
      $(this).trigger('beforeLocationChange');
      cxyz = this.viewer2dTo3d(dim, cx, cy);
      this.coords_abc = cxyz;
      this.coords_ijk = Transform.atlasToImage(Transform.viewerToAtlas(this.coords_abc));
      this.paint();
      return $(this).trigger('afterLocationChange', {
        ijk: this.coords_ijk
      });
    };

    Viewer.prototype.moveToAtlasCoords = function(coords, paint) {
      if (paint == null) {
        paint = true;
      }
      this.coords_ijk = Transform.atlasToImage(coords);
      this.coords_abc = Transform.atlasToViewer(coords);
      if (paint) {
        return this.paint();
      }
    };

    Viewer.prototype.deleteView = function(index) {
      return this.views.splice(index, 1);
    };

    Viewer.prototype.jQueryInit = function() {
      return this.userInterface.jQueryInit();
    };

    Viewer.prototype.getValue = function(layer, coords, space, all) {
      var l, x, y, z, _ref;
      if (layer == null) {
        layer = null;
      }
      if (coords == null) {
        coords = null;
      }
      if (space == null) {
        space = 'viewer';
      }
      if (all == null) {
        all = false;
      }

      /* Get image value at a specific voxel. By default, returns the currently
      selected voxel for the currently active layer. Optionally, can pass a
      specific layer and/or coordinates (in viewer space) to use. If all is true,
      returns values for all layers as an array.
       */
      if (coords != null) {
        if (space === 'viewer') {
          coords = Transform.viewerToAtlas(coords);
        }
        if (space === 'viewer' || space === 'atlas') {
          coords = Transform.atlasToImage(coords);
        }
        x = coords[0], y = coords[1], z = coords[2];
      } else {
        _ref = this.coords_ijk, x = _ref[0], y = _ref[1], z = _ref[2];
      }
      if (all) {
        return (function() {
          var _i, _len, _ref1, _results;
          _ref1 = this.layerList.layers;
          _results = [];
          for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
            l = _ref1[_i];
            _results.push(l.image.data[z][y][x]);
          }
          return _results;
        }).call(this);
      }
      layer = layer != null ? this.layerList.layers[layer] : this.layerList.activeLayer;
      return layer.image.data[z][y][x];
    };

    Viewer.prototype.viewer2dTo3d = function(dim, cx, cy) {
      var cxyz;
      if (cy == null) {
        cy = null;
      }
      if (cy != null) {
        cxyz = [cx, cy];
        cxyz.splice(dim, 0, this.coords_abc[dim]);
      } else {
        cxyz = this.coords_abc;
        cxyz[dim] = cx;
      }
      return cxyz;
    };

    return Viewer;

  })();

  Image = (function() {
    function Image(data) {
      var i, j, k, p, value, vec, _i, _j, _k, _l, _len, _ref, _ref1, _ref2, _ref3, _ref4, _ref5;
      _ref = data.dims, this.x = _ref[0], this.y = _ref[1], this.z = _ref[2];
      if ('data3d' in data) {
        this.min = 0;
        this.max = 0;
        this.data = [];
        for (i = _i = 0, _ref1 = this.x; 0 <= _ref1 ? _i < _ref1 : _i > _ref1; i = 0 <= _ref1 ? ++_i : --_i) {
          this.data[i] = [];
          for (j = _j = 0, _ref2 = this.y; 0 <= _ref2 ? _j < _ref2 : _j > _ref2; j = 0 <= _ref2 ? ++_j : --_j) {
            this.data[i][j] = [];
            for (k = _k = 0, _ref3 = this.z; 0 <= _ref3 ? _k < _ref3 : _k > _ref3; k = 0 <= _ref3 ? ++_k : --_k) {
              value = Math.round(data.data3d[i][j][k] * 1000000) / 1000000; // Edited by Ellie from 100 to 1000000 to reduce rounding of PMI values
              if (value > this.max) {
                this.max = value;
              }
              if (value < this.min) {
                this.min = value;
              }
              this.data[i][j][k] = value;
            }
          }
        }
      } else if ('values' in data) {
        _ref4 = [data.max, data.min], this.max = _ref4[0], this.min = _ref4[1];
        vec = Transform.jsonToVector(data);
        this.data = Transform.vectorToVolume(vec, [this.x, this.y, this.z]);
      } else {
        this.min = 0;
        this.max = 0;
        this.data = this.empty();
      }
      if ('peaks' in data) {
        _ref5 = data.peaks;
        for (_l = 0, _len = _ref5.length; _l < _len; _l++) {
          p = _ref5[_l];
          this.addSphere(Transform.atlasToImage([p.x, p.y, p.z]), p.r != null ? p.r : p.r = 3, p.value != null ? p.value : p.value = 1);
        }
        this.max = 2;
      }
    }

    Image.prototype.empty = function() {
      var i, j, k, vol, _i, _j, _k, _ref, _ref1, _ref2;
      vol = [];
      for (i = _i = 0, _ref = this.x; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        vol[i] = [];
        for (j = _j = 0, _ref1 = this.y; 0 <= _ref1 ? _j < _ref1 : _j > _ref1; j = 0 <= _ref1 ? ++_j : --_j) {
          vol[i][j] = [];
          for (k = _k = 0, _ref2 = this.z; 0 <= _ref2 ? _k < _ref2 : _k > _ref2; k = 0 <= _ref2 ? ++_k : --_k) {
            vol[i][j][k] = 0;
          }
        }
      }
      return vol;
    };

    Image.prototype.addSphere = function(coords, r, value) {
      var dist, i, j, k, x, y, z, _i, _j, _k, _ref;
      if (value == null) {
        value = 1;
      }
      if (r <= 0) {
        return;
      }
      _ref = coords.reverse(), x = _ref[0], y = _ref[1], z = _ref[2];
      if (!((x != null) && (y != null) && (z != null))) {
        return;
      }
      for (i = _i = -r; -r <= r ? _i <= r : _i >= r; i = -r <= r ? ++_i : --_i) {
        if ((x - i) < 0 || (x + i) > (this.x - 1)) {
          continue;
        }
        for (j = _j = -r; -r <= r ? _j <= r : _j >= r; j = -r <= r ? ++_j : --_j) {
          if ((y - j) < 0 || (y + j) > (this.y - 1)) {
            continue;
          }
          for (k = _k = -r; -r <= r ? _k <= r : _k >= r; k = -r <= r ? ++_k : --_k) {
            if ((z - k) < 0 || (z + k) > (this.z - 1)) {
              continue;
            }
            dist = i * i + j * j + k * k;
            if (dist < r * r) {
              this.data[i + x][j + y][k + z] = value;
            }
          }
        }
      }
      return false;
    };

    Image.prototype.resample = function(newx, newy, newz) {};

    Image.prototype.slice = function(dim, index) {
      var i, j, slice, _i, _j, _k, _ref, _ref1, _ref2;
      switch (dim) {
        case 0:
          slice = [];
          for (i = _i = 0, _ref = this.x; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
            slice[i] = [];
            for (j = _j = 0, _ref1 = this.y; 0 <= _ref1 ? _j < _ref1 : _j > _ref1; j = 0 <= _ref1 ? ++_j : --_j) {
              slice[i][j] = this.data[i][j][index];
            }
          }
          break;
        case 1:
          slice = [];
          for (i = _k = 0, _ref2 = this.x; 0 <= _ref2 ? _k < _ref2 : _k > _ref2; i = 0 <= _ref2 ? ++_k : --_k) {
            slice[i] = this.data[i][index];
          }
          break;
        case 2:
          slice = this.data[index];
      }
      return slice;
    };

    Image.prototype.dims = function() {
      return [this.x, this.y, this.z];
    };

    return Image;

  })();

  Layer = (function() {
    function Layer(image, options) {
      this.image = image;
      options = $.extend(true, {
        colorPalette: 'red',
        sign: 'positive',
        visible: true,
        opacity: 1.0,
        cache: false,
        download: false,
        positiveThreshold: 0,
        negativeThreshold: 0,
        description: '',
        intent: 'Intensity'
      }, options);
      this.name = options.name;
      this.sign = options.sign;
      this.colorMap = this.setColorMap(options.colorPalette);
      this.visible = options.visible;
      this.threshold = this.setThreshold(options.negativeThreshold, options.positiveThreshold);
      this.opacity = options.opacity;
      this.download = options.download;
      this.intent = options.intent;
      this.description = options.description;
    }

    Layer.prototype.hide = function() {
      return this.visible = false;
    };

    Layer.prototype.show = function() {
      return this.visible = true;
    };

    Layer.prototype.toggle = function() {
      return this.visible = !this.visible;
    };

    Layer.prototype.slice = function(view, viewer) {
      var data;
      data = this.image.slice(view.dim, viewer.coords_ijk[view.dim]);
      data = this.threshold.mask(data);
      return data;
    };

    Layer.prototype.setColorMap = function(palette, steps) {
      var max, maxAbs, min;
      if (palette == null) {
        palette = null;
      }
      if (steps == null) {
        steps = null;
      }
      this.palette = palette;
      if (this.sign === 'both') {

        /* Instead of using the actual min/max range, we find the
        largest absolute value and use that as the bound for
        both signs. This preserves color maps where 0 is
        meaningful; e.g., for hot and cold, we want blues to
        be negative and reds to be positive even when
        abs(min) and abs(max) are quite different.
        BUT if min or max are 0, then implicitly fall back to
        treating mode as if it were 'positive' or 'negative'
         */
        maxAbs = Math.max(this.image.min, this.image.max);
        min = this.image.min === 0 ? 0 : -maxAbs;
        max = this.image.max === 0 ? 0 : maxAbs;
      } else {
        min = this.sign === 'positive' ? 0 : this.image.min;
        max = this.sign === 'negative' ? 0 : this.image.max;
      }
      return this.colorMap = new ColorMap(min, max, palette, steps);
    };

    Layer.prototype.setThreshold = function(negThresh, posThresh) {
      if (negThresh == null) {
        negThresh = 0;
      }
      if (posThresh == null) {
        posThresh = 0;
      }
      return this.threshold = new Threshold(negThresh, posThresh, this.sign);
    };

    Layer.prototype.update = function(settings) {
      var k, nt, pt, v;
      if ('sign' in settings) {
        this.sign = settings['sign'];
      }
      nt = 0;
      pt = 0;
      for (k in settings) {
        v = settings[k];
        switch (k) {
          case 'colorPalette':
            this.setColorMap(v);
            break;
          case 'opacity':
            this.opacity = v;
            break;
          case 'image-intent':
            this.intent = v;
            break;
          case 'pos-threshold':
            pt = v;
            break;
          case 'neg-threshold':
            nt = v;
            break;
          case 'description':
            this.description = v;
        }
      }
      return this.setThreshold(nt, pt, this.sign);
    };

    Layer.prototype.getSettings = function() {
      var nt, pt, settings;
      nt = this.threshold.negThresh;
      pt = this.threshold.posThresh;
      nt || (nt = 0.0);
      pt || (pt = 0.0);
      settings = {
        colorPalette: this.palette,
        sign: this.sign,
        opacity: this.opacity,
        'image-intent': this.intent,
        'pos-threshold': pt,
        'neg-threshold': nt,
        'description': this.description
      };
      return settings;
    };

    return Layer;

  })();

  LayerList = (function() {
    function LayerList() {
      this.clearLayers();
    }

    LayerList.prototype.addLayer = function(layer, activate) {
      if (activate == null) {
        activate = true;
      }
      this.layers.push(layer);
      if (activate) {
        return this.activateLayer(this.layers.length - 1);
      }
    };

    LayerList.prototype.deleteLayer = function(target) {
      var i, index, l, newInd;
      index = String(target).match(/^\d+$/) ? parseInt(target) : index = ((function() {
        var _i, _len, _ref, _results;
        _ref = this.layers;
        _results = [];
        for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
          l = _ref[i];
          if (l.name === target) {
            _results.push(i);
          }
        }
        return _results;
      }).call(this))[0];
      this.layers.splice(index, 1);
      if ((this.layers.length != null) && (this.activeLayer == null)) {
        newInd = index === 0 ? 1 : index - 1;
        return this.activateLayer(newInd);
      }
    };

    LayerList.prototype.clearLayers = function() {
      this.layers = [];
      return this.activeLayer = null;
    };

    LayerList.prototype.activateLayer = function(index) {
      return this.activeLayer = this.layers[index];
    };

    LayerList.prototype.updateActiveLayer = function(settings) {
      return this.activeLayer.update(settings);
    };

    LayerList.prototype.getLayerNames = function() {
      var l;
      return (function() {
        var _i, _len, _ref, _results;
        _ref = this.layers;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          l = _ref[_i];
          _results.push(l.name);
        }
        return _results;
      }).call(this);
    };

    LayerList.prototype.getLayerVisibilities = function() {
      var l;
      return (function() {
        var _i, _len, _ref, _results;
        _ref = this.layers;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          l = _ref[_i];
          _results.push(l.visible);
        }
        return _results;
      }).call(this);
    };

    LayerList.prototype.getActiveIndex = function() {
      return this.layers.indexOf(this.activeLayer);
    };

    LayerList.prototype.getNextColor = function() {
      var free, l, palettes, used;
      used = (function() {
        var _i, _len, _ref, _results;
        _ref = this.layers;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          l = _ref[_i];
          if (l.visible) {
            _results.push(l.palette);
          }
        }
        return _results;
      }).call(this);
      palettes = Object.keys(ColorMap.PALETTES);
      free = palettes.diff(used);
      if (free.length) {
        return free[0];
      } else {
        return palettes[Math.floor(Math.random() * palettes.length)];
      }
    };

    LayerList.prototype.sortLayers = function(newOrder, destroy, newOnTop) {
      var counter, i, l, n_layers, n_new, newLayers, ni, _i, _len, _ref;
      if (destroy == null) {
        destroy = false;
      }
      if (newOnTop == null) {
        newOnTop = true;
      }
      newLayers = [];
      counter = 0;
      n_layers = this.layers.length;
      n_new = newOrder.length;
      _ref = this.layers;
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        l = _ref[i];
        ni = newOrder.indexOf(l.name);
        if (ni < 0) {
          if (destroy) {
            continue;
          } else {
            ni = i;
            if (newOnTop) {
              ni += n_new;
            }
            counter += 1;
          }
        } else if (!(destroy || newOnTop)) {
          ni += counter;
        }
        newLayers[ni] = l;
      }
      return this.layers = newLayers;
    };

    return LayerList;

  })();

  Threshold = (function() {
    function Threshold(negThresh, posThresh, sign) {
      this.negThresh = negThresh;
      this.posThresh = posThresh;
      this.sign = sign != null ? sign : 'both';
    }

    Threshold.prototype.mask = function(data) {
      var i, res, _i, _ref;
      if (this.posThresh === 0 && this.negThresh === 0 && this.sign === 'both') {
        return data;
      }
      res = [];
      for (i = _i = 0, _ref = data.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        res[i] = data[i].map((function(_this) {
          return function(v) {
            if (((_this.negThresh < v && v < _this.posThresh)) || (v < 0 && _this.sign === 'positive') || (v > 0 && _this.sign === 'negative')) {
              return 0;
            } else {
              return v;
            }
          };
        })(this));
      }
      return res;
    };

    return Threshold;

  })();

  Transform = {
    jsonToVector: function(data) {
      var curr_inds, i, j, v, _i, _j, _k, _ref, _ref1, _ref2;
      v = new Array(data.dims[0] * data.dims[1] * data.dims[2]);
      for (i = _i = 0, _ref = v.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        v[i] = 0;
      }
      for (i = _j = 0, _ref1 = data.values.length; 0 <= _ref1 ? _j < _ref1 : _j > _ref1; i = 0 <= _ref1 ? ++_j : --_j) {
        curr_inds = data.indices[i];
        for (j = _k = 0, _ref2 = curr_inds.length; 0 <= _ref2 ? _k < _ref2 : _k > _ref2; j = 0 <= _ref2 ? ++_k : --_k) {
          v[curr_inds[j] - 1] = data.values[i];
        }
      }
      return v;
    },
    vectorToVolume: function(vec, dims) {
      var i, j, k, sliceSize, vol, x, y, z, _i, _j, _k, _l, _ref, _ref1, _ref2, _ref3;
      vol = [];
      for (i = _i = 0, _ref = dims[0]; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        vol[i] = [];
        for (j = _j = 0, _ref1 = dims[1]; 0 <= _ref1 ? _j < _ref1 : _j > _ref1; j = 0 <= _ref1 ? ++_j : --_j) {
          vol[i][j] = [];
          for (k = _k = 0, _ref2 = dims[2]; 0 <= _ref2 ? _k < _ref2 : _k > _ref2; k = 0 <= _ref2 ? ++_k : --_k) {
            vol[i][j][k] = 0;
            sliceSize = dims[1] * dims[2];
          }
        }
      }
      for (i = _l = 0, _ref3 = vec.length; 0 <= _ref3 ? _l < _ref3 : _l > _ref3; i = 0 <= _ref3 ? ++_l : --_l) {
        if (typeof vec[i] === undefined) {
          continue;
        }
        x = Math.floor(i / sliceSize);
        y = Math.floor((i - (x * sliceSize)) / dims[2]);
        z = i - (x * sliceSize) - (y * dims[2]);
        vol[x][y][z] = vec[i];
      }
      return vol;
    },
    transformCoordinates: function(coords, matrix, round) {
      var m, res, v;
      if (round == null) {
        round = true;
      }
      m = $M(matrix);
      coords = coords.slice(0);
      coords.push(1);
      v = $V(coords);
      res = [];
      m.x(v).each(function(e) {
        if (round) {
          e = Math.round(e);
        }
        return res.push(e);
      });
      return res;
    },
    viewerToAtlas: function(coords) {
      var matrix;
      matrix = [[180, 0, 0, -90], [0, -218, 0, 90], [0, 0, -180, 108]];
      return this.transformCoordinates(coords, matrix);
    },
    atlasToViewer: function(coords) {
      var matrix;
      matrix = [[1.0 / 180, 0, 0, 0.5], [0, -1.0 / 218, 0, 90.0 / 218], [0, 0, -1.0 / 180, 108.0 / 180]];
      return this.transformCoordinates(coords, matrix, false);
    },
    atlasToImage: function(coords) {
      var matrix;
      matrix = [[-0.5, 0, 0, 45], [0, 0.5, 0, 63], [0, 0, 0.5, 36]];
      return this.transformCoordinates(coords, matrix);
    },
    imageToAtlas: function(coords) {
      var matrix;
      matrix = [[-2, 0, 0, 90], [0, 2, 0, -126], [0, 0, 2, -72]];
      return this.transformCoordinates(coords, matrix);
    }
  };

  UserInterface = (function() {
    function UserInterface(viewer, layerListId, layerSettingClass) {
      this.viewer = viewer;
      this.layerListId = layerListId;
      this.layerSettingClass = layerSettingClass;
      this.viewSettings = this.viewer.viewSettings;
      this.components = {};
      $(this.layerListId).sortable({
        update: (function(_this) {
          return function() {
            var layers, paint;
            layers = ($('.layer_list_item').map(function() {
              return $(this).text();
            })).toArray();
            return _this.viewer.sortLayers(layers, paint = true);
          };
        })(this)
      });
      $(this.layerSettingClass).change((function(_this) {
        return function(e) {
          return _this.settingsChanged();
        };
      })(this));
    }

    UserInterface.prototype.addSlider = function(name, element, orientation, min, max, value, step, textField) {
      var slider;
      slider = new SliderComponent(this, name, element, orientation, min, max, value, step);
      if (textField != null) {
        this.addTextFieldForSlider(textField, slider);
      }
      return this.components[name] = slider;
    };

    UserInterface.prototype.addTextField = function(name, element) {
      var tf;
      tf = new TextFieldComponent(this, name, element);
      return this.components[name] = tf;
    };

    UserInterface.prototype.addTextFieldForSlider = function(element, slider) {
      var name, tf;
      name = slider.name + '_textField';
      tf = new TextFieldComponent(this, name, element, slider);
      return slider.attachTextField(tf);
    };

    UserInterface.prototype.addColorSelect = function(element) {
      return this.components['colorPalette'] = new SelectComponent(this, 'colorPalette', element, Object.keys(ColorMap.PALETTES));
    };

    UserInterface.prototype.addSignSelect = function(element) {
      return this.components['sign'] = new SelectComponent(this, 'signSelect', element, ['both', 'positive', 'negative']);
    };

    UserInterface.prototype.addSettingsCheckboxes = function(element, settings) {
      var checked, s, v, validSettings;
      $(element).empty();
      validSettings = {
        panzoom: 'Pan/zoom',
        crosshairs: 'Crosshairs',
        labels: 'Labels'
      };
      for (s in settings) {
        v = settings[s];
        if (s in validSettings) {
          checked = v ? ' checked' : '';
          $(element).append("<div class='checkbox_row'><input type='checkbox' class='settings_box' " + checked + " id='" + s + "'>" + validSettings[s] + "</div>");
        }
      }
      return $('.settings_box').change((function(_this) {
        return function(e) {
          return _this.checkboxesChanged();
        };
      })(this));
    };

    UserInterface.prototype.settingsChanged = function() {
      var component, name, settings, _ref;
      settings = {};
      _ref = this.components;
      for (name in _ref) {
        component = _ref[name];
        settings[name] = component.getValue();
      }
      return this.viewer.updateSettings(settings);
    };

    UserInterface.prototype.checkboxesChanged = function() {
      var id, s, settings, val, _i, _len, _ref;
      settings = {};
      _ref = $('.settings_box');
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        s = _ref[_i];
        id = $(s).attr('id');
        val = $(s).is(':checked') ? true : false;
        settings[id + 'Enabled'] = val;
      }
      return this.viewer.updateViewSettings(settings, true);
    };

    UserInterface.prototype.updateComponents = function(settings) {
      var name, value, _results;
      _results = [];
      for (name in settings) {
        value = settings[name];
        if (name in this.components) {
          _results.push(this.components[name].setValue(value));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    UserInterface.prototype.updateThresholdSliders = function(image) {
      if ('pos-threshold' in this.components) {
        this.components['pos-threshold'].setRange(0, image.max);
      }
      if ('neg-threshold' in this.components) {
        return this.components['neg-threshold'].setRange(image.min, 0);
      }
    };

    var layerColors = ['#E2E2E2', 'rgba(91, 129, 189, 0.5)', 'rgba(193, 97, 55, 0.5)', 'rgba(220, 196, 71, 0.5)', 'rgba(146, 77, 160, 0.5)', 'rgba(67, 169, 113, 0.5)', 'rgba(209, 154, 23, 0.5)', 'rgba(72, 164, 168, 0.5)', 'rgba(202, 79, 82, 0.5)', 'rgba(217, 220, 119, 0.5)', 'rgba(213, 153, 221, 0.5)', 'rgba(130, 184, 88, 0.5)', 'rgba(232, 181, 134, 0.5)', 'rgba(114, 117, 185, 0.5)', 'rgba(170, 67, 106, 0.5)', 'rgba(172, 131, 91, 0.5)', 'rgba(66, 104, 164, 0.5)', 'rgba(168, 72, 30, 0.5)', 'rgba(195, 171, 46, 0.5)', 'rgba(121, 52, 135, 0.5)', 'rgba(42, 144, 88, 0.5)', 'rgba(184, 129, 0, 0.5)', 'rgba(47, 139, 143, 0.5)', 'rgba(177, 54, 57, 0.5)', 'rgba(192, 195, 94, 0.5)', 'rgba(188, 128, 196, 0.5)', 'rgba(105, 159, 63, 0.5)', 'rgba(207, 156, 109, 0.5)', 'rgba(89, 92, 160, 0.5)', 'rgba(145, 42, 81, 0.5)', 'rgba(147, 106, 66, 0.5)', 'rgba(116, 154, 214, 0.5)', 'rgba(218, 122, 80, 0.5)', 'rgba(245, 221, 96, 0.5)', 'rgba(171, 102, 185, 0.5)', 'rgba(92, 194, 138, 0.5)', 'rgba(234, 179, 48, 0.5)', 'rgba(97, 189, 193, 0.5)', 'rgba(227, 104, 107, 0.5)', 'rgba(242, 245, 144, 0.5)', 'rgba(238, 178, 246, 0.5)', 'rgba(155, 209, 113, 0.5)', 'rgba(255, 206, 159, 0.5)', 'rgba(139, 142, 210, 0.5)', 'rgba(195, 92, 131, 0.5)', 'rgba(197, 156, 116, 0.5)', 'rgba(41, 79, 139, 0.5)', 'rgba(143, 47, 80, 0.5)', 'rgba(170, 146, 21, 0.5)', 'rgba(96, 27, 110, 0.5)', 'rgba(17, 119, 63, 0.5)', 'rgba(159, 104, 0, 0.5)', 'rgba(22, 114, 118, 0.5)', 'rgba(152, 29, 32, 0.5)', 'rgba(167, 170, 69, 0.5)', 'rgba(163, 103, 171, 0.5)', 'rgba(80, 134, 38, 0.5)', 'rgba(182, 131, 84, 0.5)', 'rgba(64, 67, 135, 0.5)', 'rgba(120, 17, 56, 0.5)', 'rgba(122, 81, 41, 0.5)']
    UserInterface.prototype.updateLayerList = function(layers, selectedIndex) {
      var deletion_icon, download_icon, i, l, visibility_icon, _i, _ref;
      var layerIndex = 0;
      //var kLayerColors = layerColors.slice(0, layers.length).reverse() 
      var kLayerColors = layerColors.slice(0, layers.length)
      $(this.layerListId).empty();
      for (i = _i = 0, _ref = layers.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        l = layers[i];
        visibility_icon = this.viewSettings.visibilityIconEnabled ? "<div class='visibility_icon' title='Hide/show image'><span class='glyphicon glyphicon-eye-open'></i></div>" : '';
        deletion_icon = this.viewSettings.deletionIconEnabled ? "<div class='deletion_icon' title='Remove this layer'><span class='glyphicon glyphicon-trash'></i></div>" : '';
        download_icon = l.download ? "<div class='download_icon' title='Download this image'><span class='glyphicon glyphicon-save'></i></div>" : '';
        layerColor = kLayerColors[layerIndex];
        layerIndex = layerIndex + 1;
        $(this.layerListId).append($(("<li class='layer_list_item'>" + visibility_icon + "<div class='layer_label' style='background:" + layerColor + "'>") + l.name + ("</div>" + deletion_icon + download_icon + "</li>")));
      }
      $('.layer_label').click((function(_this) {
        return function(e) {
          return _this.viewer.selectLayer($('.layer_label').index(e.target));
        };
      })(this));
      $('.visibility_icon').click((function(_this) {
        return function(e) {
          return _this.toggleLayer($('.visibility_icon').index($(e.target).closest('div')));
        };
      })(this));
      $('.deletion_icon').click((function(_this) {
        return function(e) {
          if (confirm("Are you sure you want to remove this layer?")) {
            return _this.viewer.deleteLayer($('.deletion_icon').index($(e.target).closest('div')));
          }
        };
      })(this));
      $('.download_icon').click((function(_this) {
        return function(e) {
          return _this.viewer.downloadImage($('.download_icon').index($(e.target).closest('div')));
        };
      })(this));
      return $(this.layerListId).val(selectedIndex);
    };

    UserInterface.prototype.updateLayerVisibility = function(visible) {
      var i, _i, _ref, _results;
      if (!this.viewSettings.visibilityIconEnabled) {
        return;
      }
      _results = [];
      for (i = _i = 0, _ref = visible.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        if (visible[i]) {
          _results.push($('.visibility_icon>span').eq(i).removeClass('glyphicon glyphicon-eye-close').addClass('glyphicon glyphicon-eye-open'));
        } else {
          _results.push($('.visibility_icon>span').eq(i).removeClass('glyphicon glyphicon-eye-open').addClass('glyphicon glyphicon-eye-close'));
        }
      }
      return _results;
    };

    UserInterface.prototype.updateLayerSelection = function(id) {
      $('.layer_label').eq(id).addClass('selected');
      return $('.layer_label').not(":eq(" + id + ")").removeClass('selected');
    };

    UserInterface.prototype.toggleLayer = function(id) {
      return this.viewer.toggleLayer(id);
    };

    return UserInterface;

  })();

  DataPanel = (function() {
    function DataPanel(viewer) {
      this.viewer = viewer;
      this.fields = {};
    }

    DataPanel.prototype.addDataField = function(name, element) {
      return this.fields[name] = new DataField(this, name, element);
    };

    DataPanel.prototype.addCoordinateFields = function(name, element) {
      var i, target, _i;
      target = $(element);
      for (i = _i = 0; _i < 2; i = ++_i) {
        target.append($("<div class='axis_pos' id='axis_pos_" + axis + "'></div>"));
      }
      return $('axis_pos').change((function(_this) {
        return function(e) {
          var cc, _j;
          for (i = _j = 0; _j < 2; i = ++_j) {
            cc = $("#axis_pos_" + i).val();
            _this.viewer.coords_abc[i] = Transform.atlasToViewer(cc);
            _this.viewer.coords_ijk[i] = cc;
          }
          return _this.viewer.update();
        };
      })(this));
    };

    DataPanel.prototype.update = function(data) {
      var i, k, pos, v, _results;
      _results = [];
      for (k in data) {
        v = data[k];
        if (k in this.fields) {
          if (k === 'currentCoordsMulti') {
            _results.push((function() {
              var _results1;
              _results1 = [];
              for (pos in v) {
                i = v[pos];
                _results1.push($("plane" + i + "_pos").text(pos));
              }
              return _results1;
            })());
          } else {
            if (k === 'currentCoords') {
              v = "[" + v + "]";
            }
            _results.push($(this.fields[k].element).text(v));
          }
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    return DataPanel;

  })();

  ViewSettings = (function() {

    /* Stores any settings common to all views--e.g., crosshair preferences,
    dragging/zooming, etc. Individual views can override these settings if view-specific
    options are desired.
     */
    function ViewSettings(options) {
      this.settings = {
        panzoomEnabled: false,
        crosshairsEnabled: false,
        crosshairsWidth: 1,
        crosshairsColor: 'white',
        labelsEnabled: true,
        visibilityIconEnabled: true,
        deletionIconEnabled: true
      };
      this.updateSettings(options);
    }

    ViewSettings.prototype.updateSettings = function(options) {
      var k, v, _ref;
      $.extend(this.settings, options);
      _ref = this.settings;
      for (k in _ref) {
        v = _ref[k];
        this[k] = v;
      }
      return this.crosshairs = new Crosshairs(this.crosshairsEnabled, this.crosshairsColor, this.crosshairsWidth);
    };

    return ViewSettings;

  })();

  View = (function() {
    function View(viewer, viewSettings, element, dim, labels, slider) {
      this.viewer = viewer;
      this.viewSettings = viewSettings;
      this.element = element;
      this.dim = dim;
      this.labels = labels != null ? labels : true;
      this.slider = slider != null ? slider : null;
      this._handleScroll = __bind(this._handleScroll, this);
      this._zoom = __bind(this._zoom, this);
      this._canvasMouseMove = __bind(this._canvasMouseMove, this);
      this._canvasClick = __bind(this._canvasClick, this);
      this.resetCanvas();
      this._jQueryInit();
    }

    View.prototype.addSlider = function(name, element, orientation, min, max, value, step, textField) {
      this.slider = new SliderComponent(this, name, element, orientation, min, max, value, step);
      if (textField != null) {
        return this.viewer.addTextFieldForSlider(textField, this.slider);
      }
    };

    View.prototype.clear = function() {
      var currentState;
      currentState = $.extend(true, {}, this.context.getTransform());
      this.context.reset();
      this.context.fillStyle = 'black';
      this.context.fillRect(0, 0, this.width, this.height);
      return this.context.setTransformFromArray(currentState);
    };

    View.prototype.resetCanvas = function() {
      this.canvas = $(this.element).find('canvas');
      this.width = this.canvas.width();
      this.height = this.canvas.height();
      this.context = this.canvas[0].getContext("2d");
      trackTransforms(this.context);
      this.lastX = this.width / 2;
      this.lastY = this.height / 2;
      this.dragStart = void 0;
      this.scaleFactor = 1.1;
      return this.clear();
    };

    View.prototype.paint = function(layer) {
      var col, cols, data, dims, fuzz, i, img, j, val, xCell, xp, yCell, yp, _i, _j, _ref, _ref1;
      if (this.width === 0) {
        this.resetCanvas();
      }
      data = layer.slice(this, this.viewer);
      cols = layer.colorMap.map(data);
      img = layer.image;
      dims = [[img.y, img.z], [img.x, img.z], [img.x, img.y]];
      xCell = this.width / dims[this.dim][0];
      yCell = this.height / dims[this.dim][1];
      this.xCell = xCell;
      this.yCell = yCell;
      fuzz = 0.5;
      this.context.globalAlpha = layer.opacity;
      this.context.lineWidth = 1;
      for (i = _i = 0, _ref = dims[this.dim][1]; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        for (j = _j = 0, _ref1 = dims[this.dim][0]; 0 <= _ref1 ? _j < _ref1 : _j > _ref1; j = 0 <= _ref1 ? ++_j : --_j) {
          if (typeof data[i][j] === undefined | data[i][j] === 0) {
            continue;
          }
          xp = this.width - (j + 1) * xCell;
          yp = this.height - (i + 1) * yCell;
          col = cols[i][j];
          this.context.fillStyle = col;
          this.context.fillRect(xp, yp, xCell + fuzz, yCell + fuzz);
        }
      }
      this.context.globalAlpha = 1.0;
      if (this.slider != null) {
        val = this.viewer.coords_abc[this.dim];
        if (this.dim !== Viewer.XAXIS) {
          val = 1 - val;
        }
        return $(this.slider.element).slider('option', 'value', val);
      }
    };

    View.prototype.drawCrosshairs = function() {
      var ch, xPos, yPos;
      ch = this.viewSettings.crosshairs;
      if (!ch.visible) {
        return;
      }
      this.context.fillStyle = ch.color;
      xPos = this.viewer.coords_abc[[1, 0, 0][this.dim]] * this.width;
      yPos = this.viewer.coords_abc[[2, 2, 1][this.dim]] * this.height;
      this.context.fillRect(0, yPos - ch.width / 2, this.width, ch.width);
      return this.context.fillRect(xPos - ch.width / 2, 0, ch.width, this.height);
    };

    View.prototype.drawLabels = function() {
      var fontSize, planePos, planeText;
      if (!this.viewSettings.labelsEnabled) {
        return;
      }
      fontSize = Math.round(this.height / 15);
      this.context.fillStyle = 'white';
      this.context.font = "" + fontSize + "px Helvetica";
      this.context.textAlign = 'left';
      this.context.textBaseline = 'middle';
      planePos = this.viewer.coords_xyz()[this.dim];
      if (planePos > 0) {
        planePos = '+' + planePos;
      }
      planeText = ['x', 'y', 'z'][this.dim] + ' = ' + planePos;
      this.context.fillText(planeText, 0.03 * this.width, 0.95 * this.height);
      this.context.textAlign = 'center';
      switch (this.dim) {
        case 0:
          this.context.fillText('A', 0.05 * this.width, 0.5 * this.height);
          return this.context.fillText('P', 0.95 * this.width, 0.5 * this.height);
        case 1:
          this.context.fillText('D', 0.95 * this.width, 0.05 * this.height);
          return this.context.fillText('V', 0.95 * this.width, 0.95 * this.height);
        case 2:
          this.context.fillText('L', 0.05 * this.width, 0.05 * this.height);
          return this.context.fillText('R', 0.95 * this.width, 0.05 * this.height);
      }
    };

    View.prototype.navSlideChange = function(value) {
      if (this.dim !== Viewer.XAXIS) {
        value = 1 - value;
      }
      return this.viewer.moveToViewerCoords(this.dim, value);
    };

    View.prototype._snapToGrid = function(x, y) {
      var dims, xVoxSize, yVoxSize;
      dims = [91, 109, 91];
      dims.splice(this.dim, 1);
      xVoxSize = 1 / dims[0];
      yVoxSize = 1 / dims[1];
      x = (Math.floor(x / xVoxSize) + 0.5) * xVoxSize;
      y = (Math.floor(y / yVoxSize) + 0.5) * yVoxSize;
      return {
        x: x,
        y: y
      };
    };

    View.prototype._jQueryInit = function() {
      var canvas;
      canvas = $(this.element).find('canvas');
      canvas.click(this._canvasClick);
      canvas.mousedown((function(_this) {
        return function(evt) {
          document.body.style.mozUserSelect = document.body.style.webkitUserSelect = document.body.style.userSelect = "none";
          _this.lastX = evt.offsetX || (evt.pageX - canvas.offset().left);
          _this.lastY = evt.offsetY || (evt.pageY - canvas.offset().top);
          return _this.dragStart = _this.context.transformedPoint(_this.lastX, _this.lastY);
        };
      })(this));
      canvas.mousemove((function(_this) {
        return function(evt) {
          var pt;
          _this._canvasMouseMove(evt);
          if (!_this.viewSettings.panzoomEnabled) {
            return;
          }
          _this.lastX = evt.offsetX || (evt.pageX - canvas.offset().left);
          _this.lastY = evt.offsetY || (evt.pageY - canvas.offset().top);
          if (_this.dragStart) {
            pt = _this.context.transformedPoint(_this.lastX, _this.lastY);
            _this.context.translate(pt.x - _this.dragStart.x, pt.y - _this.dragStart.y);
            return _this.viewer.paint();
          }
        };
      })(this));
      canvas.mouseup((function(_this) {
        return function(evt) {
          return _this.dragStart = null;
        };
      })(this));
      canvas.on("DOMMouseScroll", this._handleScroll);
      return canvas.on("mousewheel", this._handleScroll);
    };

    View.prototype._canvasClick = function(e) {
      var clickX, clickY, cx, cy, pt;
      $(this.viewer).trigger('beforeClick');
      clickX = e.offsetX || (e.pageX - $(this.element).offset().left);
      clickY = e.offsetY || (e.pageY - $(this.element).offset().top);
      pt = this.context.transformedPoint(clickX, clickY);
      cx = pt.x / this.width;
      cy = pt.y / this.height;
      pt = this._snapToGrid(cx, cy);
      this.viewer.moveToViewerCoords(this.dim, pt.x, pt.y);
      
      // Added by Ellie Beam to print the voxel value (12/22/19)
      var xyz = this.viewer.coords_ijk;
      var x, y, z; x = xyz[0]; y = xyz[1]; z = xyz[2];
      var value = 0; var name = ""; var color = "white"; 
      if (this.viewer.layerList.layers.length > 1) {
        var n_layers = this.viewer.layerList.layers.length - 1;
        for (var i = 1; i < this.viewer.layerList.layers.length; i++) {
          var this_value = this.viewer.layerList.layers[i].image.data[z][y][x];
          if (this_value > value) {
            value = this_value;
            name = names[n_layers][i-1];
            palette = ColorMap.PALETTES[nke_palette[i-1]]
            color = palette[Math.floor(palette.length * 0.3)];
          }
        }
        square = "<div id='value_data_swatch' style='background-color:" + color + "'></div>"
        document.getElementById("value_data").innerHTML = square + "<div style='margin-top:-30px;width:135px;float:right;text-align:left'><span>" + name + "</span><br/>PPMI = " + value.toFixed(5) + "</div>";
        document.getElementById("value_data_tooltip").setAttribute("data-tooltip", "Positive point-wise mutual information (PPMI) of the structure with occurrences of its domain terms (FDR<0.0001)");
        if (value == 0) {
          document.getElementById("value_data").innerHTML = ""; 
        }
      }
      
      return $(this.viewer).trigger('afterClick');
    };

    View.prototype._canvasMouseMove = function(e) {
      var clickX, clickY, cx, cxyz, cy, pt;
      clickX = e.offsetX || (e.pageX - $(this.element).offset().left);
      clickY = e.offsetY || (e.pageY - $(this.element).offset().top);
      pt = this.context.transformedPoint(clickX, clickY);
      cx = pt.x / this.width;
      cy = pt.y / this.height;
      pt = this._snapToGrid(cx, cy);
      cxyz = this.viewer.viewer2dTo3d(this.dim, pt.x, pt.y);
      return $(this.viewer).trigger('mouseMove', {
        ijk: cxyz
      });
    };

    View.prototype._zoom = function(clicks) {
      var factor, pt;
      if (!this.viewSettings.panzoomEnabled) {
        return;
      }
      pt = this.context.transformedPoint(this.lastX, this.lastY);
      this.context.translate(pt.x, pt.y);
      factor = Math.pow(this.scaleFactor, clicks);
      this.context.scale(factor, factor);
      this.context.translate(-pt.x, -pt.y);
      return this.viewer.paint();
    };

    View.prototype._handleScroll = function(evt) {
      var delta, oe;
      oe = evt.originalEvent;
      delta = (oe.wheelDelta ? oe.wheelDelta / 40 : (oe.detail ? -oe.detail : 0));
      if (delta) {
        this._zoom(delta);
      }
      return evt.preventDefault() && false;
    };

    return View;

  })();

  Crosshairs = (function() {
    function Crosshairs(visible, color, width) {
      this.visible = visible != null ? visible : true;
      this.color = color != null ? color : 'red';
      this.width = width != null ? width : 2;
    }

    return Crosshairs;

  })();

  ColorMap = (function() {
    var basic, col, _i, _len;

    ColorMap.PALETTES = {
      grayscale: ['#000000', '#303030', 'gray', 'silver', 'white']
    };

    basic = ['red', 'green', 'blue', 'yellow', 'purple', 'lime', 'aqua', 'navy'];

    for (_i = 0, _len = basic.length; _i < _len; _i++) {
      col = basic[_i];
      ColorMap.PALETTES[col] = ['black', col, 'white'];
    }

    $.extend(ColorMap.PALETTES, {
        'nke_blue': ['#8db3ef', '#88aeea', '#83a9e5', '#7ea4e0', '#799fdb', '#749ad6', '#6f95d1', '#6a90cc', '#658bc7', '#6086c2', '#5b81bd', '#567cb8', '#5177b3', '#4c72ae', '#476da9', '#4268a4', '#3d639f', '#385e9a', '#335995', '#2e5490', '#294f8b'],
        'nke_vermillion': ['#f39369', '#ee8e64', '#e9895f', '#e4845a', '#df7f55', '#da7a50', '#d5754b', '#d07046', '#cb6b41', '#c6663c', '#c16137', '#bc5c32', '#b7572d', '#b25228', '#ad4d23', '#a8481e', '#a34319', '#9e3e14', '#9939f0', '#9434a0', '#8f2f50'],
        'nke_yellow': ['#fff679', '#fff174', '#ffec6f', '#ffe76a', '#fae265', '#f5dd60', '#f0d85b', '#ebd356', '#e6ce51', '#e1c94c', '#dcc447', '#d7bf42', '#d2ba3d', '#cdb538', '#c8b033', '#c3ab2e', '#bea629', '#b9a124', '#b49c1f', '#af971a', '#aa9215'],
        'nke_purple': ['#c47fd2', '#bf7acd', '#ba75c8', '#b570c3', '#b06bbe', '#ab66b9', '#a661b4', '#a15caf', '#9c57aa', '#9752a5', '#924da0', '#8d489b', '#884396', '#833e91', '#7e398c', '#793487', '#742f82', '#6f2a7d', '#6a2578', '#652073', '#601b6e'],
        'nke_green': ['#75dba3', '#70d69e', '#6bd199', '#66cc94', '#61c78f', '#5cc28a', '#57bd85', '#52b880', '#4db37b', '#48ae76', '#43a971', '#3ea46c', '#399f67', '#349a62', '#2f955d', '#2a9058', '#258b53', '#20864e', '#1b8149', '#167c44', '#11773f'],
        'nke_gold': ['#ffcc49', '#fec744', '#f9c23f', '#f4bd3a', '#efb835', '#eab330', '#e5ae2b', '#e0a926', '#dba421', '#d69f1c', '#d19a17', '#cc9512', '#c790d0', '#c28b80', '#bd8630', '#b88100', '#b37c00', '#ae7700', '#a97200', '#a46d00', '#9f6800'],
        'nke_teal': ['#7ad6da', '#75d1d5', '#70ccd0', '#6bc7cb', '#66c2c6', '#61bdc1', '#5cb8bc', '#57b3b7', '#52aeb2', '#4da9ad', '#48a4a8', '#439fa3', '#3e9a9e', '#399599', '#349094', '#2f8b8f', '#2a868a', '#258185', '#207c80', '#1b777b', '#167276'],
        'nke_red': ['#fc8184', '#f77c7f', '#f2777a', '#ed7275', '#e86d70', '#e3686b', '#de6366', '#d95e61', '#d4595c', '#cf5457', '#ca4f52', '#c54a4d', '#c04548', '#bb4043', '#b63b3e', '#b13639', '#ac3134', '#a72c2f', '#a2272a', '#9d2225', '#981d20'],
        'nke_chartreuse': ['#ffffa9', '#ffffa4', '#ffff9f', '#fcff9a', '#f7fa95', '#f2f590', '#edf08b', '#e8eb86', '#e3e681', '#dee17c', '#d9dc77', '#d4d772', '#cfd26d', '#cacd68', '#c5c863', '#c0c35e', '#bbbe59', '#b6b954', '#b1b44f', '#acaf4a', '#a7aa45'],
        'nke_lavendar': ['#ffcbff', '#ffc6ff', '#fdc1ff', '#f8bcff', '#f3b7fb', '#eeb2f6', '#e9adf1', '#e4a8ec', '#dfa3e7', '#da9ee2', '#d599dd', '#d094d8', '#cb8fd3', '#c68ace', '#c185c9', '#bc80c4', '#b77bbf', '#b276ba', '#ad71b5', '#a86cb0', '#a367ab'],
        'nke_lime': ['#b4ea8a', '#afe585', '#aae080', '#a5db7b', '#a0d676', '#9bd171', '#96cc6c', '#91c767', '#8cc262', '#87bd5d', '#82b858', '#7db353', '#78ae4e', '#73a949', '#6ea444', '#699f3f', '#649a3a', '#5f9535', '#5a9030', '#558b2b', '#508626'],
        'nke_orange': ['#ffe7b8', '#ffe2b3', '#ffddae', '#ffd8a9', '#ffd3a4', '#ffce9f', '#fcc99a', '#f7c495', '#f2bf90', '#edba8b', '#e8b586', '#e3b081', '#deab7c', '#d9a677', '#d4a172', '#cf9c6d', '#ca9768', '#c59263', '#c08d5e', '#bb8859', '#b68354'],
        'nke_indigo': ['#a4a7eb', '#9fa2e6', '#9a9de1', '#9598dc', '#9093d7', '#8b8ed2', '#8689cd', '#8184c8', '#7c7fc3', '#777abe', '#7275b9', '#6d70b4', '#686baf', '#6366aa', '#5e61a5', '#595ca0', '#54579b', '#4f5296', '#4a4d91', '#45488c', '#404387'],
        'nke_magenta': ['#dc759c', '#d77097', '#d26b92', '#cd668d', '#c86188', '#c35c83', '#be577e', '#b95279', '#b44d74', '#af486f', '#aa436a', '#a53e65', '#a03960', '#9b345b', '#962f56', '#912a51', '#8c254c', '#872047', '#821b42', '#7d163d', '#781138'],
        'nke_brown': ['#deb58d', '#d9b088', '#d4ab83', '#cfa67e', '#caa179', '#c59c74', '#c0976f', '#bb926a', '#b68d65', '#b18860', '#ac835b', '#a77e56', '#a27951', '#9d744c', '#986f47', '#936a42', '#8e653d', '#896038', '#845b33', '#7f562e', '#7a5129'],
        'nke_dark_blue': ['#749ad6', '#6f95d1', '#6a90cc', '#658bc7', '#6086c2', '#5b81bd', '#567cb8', '#5177b3', '#4c72ae', '#476da9', '#4268a4', '#3d639f', '#385e9a', '#335995', '#2e5490', '#294f8b', '#244a86', '#1f4581', '#1a407c', '#153b77', '#103672'],
        'nke_dark_vermillion': ['#da7a50', '#d5754b', '#d07046', '#cb6b41', '#c6663c', '#c16137', '#bc5c32', '#b7572d', '#b25228', '#ad4d23', '#a8481e', '#a34319', '#9e3e14', '#9939f0', '#9434a0', '#8f2f50', '#8a2a00', '#852500', '#802000', '#7b1b00', '#761600'],
        'nke_dark_yellow': ['#f5dd60', '#f0d85b', '#ebd356', '#e6ce51', '#e1c94c', '#dcc447', '#d7bf42', '#d2ba3d', '#cdb538', '#c8b033', '#c3ab2e', '#bea629', '#b9a124', '#b49c1f', '#af971a', '#aa9215', '#a58d10', '#a088b0', '#9b8360', '#967e10', '#917900'],
        'nke_dark_purple': ['#ab66b9', '#a661b4', '#a15caf', '#9c57aa', '#9752a5', '#924da0', '#8d489b', '#884396', '#833e91', '#7e398c', '#793487', '#742f82', '#6f2a7d', '#6a2578', '#652073', '#601b6e', '#5b1669', '#561164', '#51c5f0', '#4c75a0', '#472550'],
        'nke_dark_green': ['#5cc28a', '#57bd85', '#52b880', '#4db37b', '#48ae76', '#43a971', '#3ea46c', '#399f67', '#349a62', '#2f955d', '#2a9058', '#258b53', '#20864e', '#1b8149', '#167c44', '#11773f', '#c723a0', '#76d350', '#268300', '#0632b0', '#05e260'],
        'nke_dark_gold': ['#eab332', '#e5ae2d', '#e0a928', '#dba423', '#d69f1e', '#d19a19', '#cc9514', '#c790f0', '#c28ba0', '#bd8650', '#b88100', '#b37c00', '#ae7700', '#a97200', '#a46d00', '#9f6800', '#9a6300', '#955e00', '#905900', '#8b5400', '#864f00'],
        'nke_dark_teal': ['#61bdc1', '#5cb8bc', '#57b3b7', '#52aeb2', '#4da9ad', '#48a4a8', '#439fa3', '#3e9a9e', '#399599', '#349094', '#2f8b8f', '#2a868a', '#258185', '#207c80', '#1b777b', '#167276', '#116d71', '#c686c0', '#763670', '#25e620', '#0595d0'],
        'nke_dark_red': ['#e3686b', '#de6366', '#d95e61', '#d4595c', '#cf5457', '#ca4f52', '#c54a4d', '#c04548', '#bb4043', '#b63b3e', '#b13639', '#ac3134', '#a72c2f', '#a2272a', '#9d2225', '#981d20', '#93181b', '#8e1316', '#89e110', '#849c00', '#7f4700'],
        'nke_dark_chartreuse': ['#f2f590', '#edf08b', '#e8eb86', '#e3e681', '#dee17c', '#d9dc77', '#d4d772', '#cfd26d', '#cacd68', '#c5c863', '#c0c35e', '#bbbe59', '#b6b954', '#b1b44f', '#acaf4a', '#a7aa45', '#a2a540', '#9da03b', '#989b36', '#939631', '#8e912c'],
        'nke_dark_lavendar': ['#eeb2f6', '#e9adf1', '#e4a8ec', '#dfa3e7', '#da9ee2', '#d599dd', '#d094d8', '#cb8fd3', '#c68ace', '#c185c9', '#bc80c4', '#b77bbf', '#b276ba', '#ad71b5', '#a86cb0', '#a367ab', '#9e62a6', '#995da1', '#94589c', '#8f5397', '#8a4e92'],
        'nke_dark_lime': ['#9bd171', '#96cc6c', '#91c767', '#8cc262', '#87bd5d', '#82b858', '#7db353', '#78ae4e', '#73a949', '#6ea444', '#699f3f', '#649a3a', '#5f9535', '#5a9030', '#558b2b', '#508626', '#4b8121', '#467c1c', '#417717', '#3c7212', '#376dd0'],
        'nke_dark_orange': ['#ffce9f', '#fcc99a', '#f7c495', '#f2bf90', '#edba8b', '#e8b586', '#e3b081', '#deab7c', '#d9a677', '#d4a172', '#cf9c6d', '#ca9768', '#c59263', '#c08d5e', '#bb8859', '#b68354', '#b17e4f', '#ac794a', '#a77445', '#a26f40', '#9d6a3b'],
        'nke_dark_indigo': ['#8b8ed2', '#8689cd', '#8184c8', '#7c7fc3', '#777abe', '#7275b9', '#6d70b4', '#686baf', '#6366aa', '#5e61a5', '#595ca0', '#54579b', '#4f5296', '#4a4d91', '#45488c', '#404387', '#3b3e82', '#36397d', '#313478', '#2c2f73', '#272a6e'],
        'nke_dark_magenta': ['#c35c83', '#be577e', '#b95279', '#b44d74', '#af486f', '#aa436a', '#a53e65', '#a03960', '#9b345b', '#962f56', '#912a51', '#8c254c', '#872047', '#821b42', '#7d163d', '#781138', '#73c330', '#6e72e0', '#692290', '#640240', '#5f01f0'],
        'nke_dark_brown': ['#c59c74', '#c0976f', '#bb926a', '#b68d65', '#b18860', '#ac835b', '#a77e56', '#a27951', '#9d744c', '#986f47', '#936a42', '#8e653d', '#896038', '#845b33', '#7f562e', '#7a5129', '#754c24', '#70471f', '#6b421a', '#663d15', '#613810'],
        'nke_light_blue': ['#a6ccff', '#a1c7ff', '#9cc2fe', '#97bdf9', '#92b8f4', '#8db3ef', '#88aeea', '#83a9e5', '#7ea4e0', '#799fdb', '#749ad6', '#6f95d1', '#6a90cc', '#658bc7', '#6086c2', '#5b81bd', '#567cb8', '#5177b3', '#4c72ae', '#476da9', '#4268a4'],
        'nke_light_vermillion': ['#ffac82', '#ffa77d', '#ffa278', '#fd9d73', '#f8986e', '#f39369', '#ee8e64', '#e9895f', '#e4845a', '#df7f55', '#da7a50', '#d5754b', '#d07046', '#cb6b41', '#c6663c', '#c16137', '#bc5c32', '#b7572d', '#b25228', '#ad4d23', '#a8481e'],
        'nke_light_yellow': ['#ffff92', '#ffff8d', '#ffff88', '#ffff83', '#fffb7e', '#fff679', '#fff174', '#ffec6f', '#ffe76a', '#fae265', '#f5dd60', '#f0d85b', '#ebd356', '#e6ce51', '#e1c94c', '#dcc447', '#d7bf42', '#d2ba3d', '#cdb538', '#c8b033', '#c3ab2e'],
        'nke_light_purple': ['#dd98eb', '#d893e6', '#d38ee1', '#ce89dc', '#c984d7', '#c47fd2', '#bf7acd', '#ba75c8', '#b570c3', '#b06bbe', '#ab66b9', '#a661b4', '#a15caf', '#9c57aa', '#9752a5', '#924da0', '#8d489b', '#884396', '#833e91', '#7e398c', '#793487'],
        'nke_light_green': ['#8ef4bc', '#89efb7', '#84eab2', '#7fe5ad', '#7ae0a8', '#75dba3', '#70d69e', '#6bd199', '#66cc94', '#61c78f', '#5cc28a', '#57bd85', '#52b880', '#4db37b', '#48ae76', '#43a971', '#3ea46c', '#399f67', '#349a62', '#2f955d', '#2a9058'],
        'nke_light_gold': ['#ffe562', '#ffe05d', '#ffdb58', '#ffd653', '#ffd14e', '#ffcc49', '#fec744', '#f9c23f', '#f4bd3a', '#efb835', '#eab330', '#e5ae2b', '#e0a926', '#dba421', '#d69f1c', '#d19a17', '#cc9512', '#c790d0', '#c28b80', '#bd8630', '#b88100'],
        'nke_light_teal': ['#93eff3', '#8eeaee', '#89e5e9', '#84e0e4', '#7fdbdf', '#7ad6da', '#75d1d5', '#70ccd0', '#6bc7cb', '#66c2c6', '#61bdc1', '#5cb8bc', '#57b3b7', '#52aeb2', '#4da9ad', '#48a4a8', '#439fa3', '#3e9a9e', '#399599', '#349094', '#2f8b8f'],
        'nke_light_red': ['#ff9a9d', '#ff9598', '#ff9093', '#ff8b8e', '#ff8689', '#fc8184', '#f77c7f', '#f2777a', '#ed7275', '#e86d70', '#e3686b', '#de6366', '#d95e61', '#d4595c', '#cf5457', '#ca4f52', '#c54a4d', '#c04548', '#bb4043', '#b63b3e', '#b13639'],
        'nke_light_chartreuse': ['#ffffc2', '#ffffbd', '#ffffb8', '#ffffb3', '#ffffae', '#ffffa9', '#ffffa4', '#ffff9f', '#fcff9a', '#f7fa95', '#f2f590', '#edf08b', '#e8eb86', '#e3e681', '#dee17c', '#d9dc77', '#d4d772', '#cfd26d', '#cacd68', '#c5c863', '#c0c35e'],
        'nke_light_lavendar': ['#ffe4ff', '#ffdfff', '#ffdaff', '#ffd5ff', '#ffd0ff', '#ffcbff', '#ffc6ff', '#fdc1ff', '#f8bcff', '#f3b7fb', '#eeb2f6', '#e9adf1', '#e4a8ec', '#dfa3e7', '#da9ee2', '#d599dd', '#d094d8', '#cb8fd3', '#c68ace', '#c185c9', '#bc80c4'],
        'nke_light_lime': ['#cdffa3', '#c8fe9e', '#c3f999', '#bef494', '#b9ef8f', '#b4ea8a', '#afe585', '#aae080', '#a5db7b', '#a0d676', '#9bd171', '#96cc6c', '#91c767', '#8cc262', '#87bd5d', '#82b858', '#7db353', '#78ae4e', '#73a949', '#6ea444', '#699f3f'],
        'nke_light_orange': ['#ffffd1', '#fffbcc', '#fff6c7', '#fff1c2', '#ffecbd', '#ffe7b8', '#ffe2b3', '#ffddae', '#ffd8a9', '#ffd3a4', '#ffce9f', '#fac99a', '#f5c495', '#f0bf90', '#ebba8b', '#e6b586', '#e1b081', '#dcab7c', '#d7a677', '#d2a172', '#cd9c6d'],
        'nke_light_indigo': ['#bdc0ff', '#b8bbff', '#b3b6fa', '#aeb1f5', '#a9acf0', '#a4a7eb', '#9fa2e6', '#9a9de1', '#9598dc', '#9093d7', '#8b8ed2', '#8689cd', '#8184c8', '#7c7fc3', '#777abe', '#7275b9', '#6d70b4', '#686baf', '#6366aa', '#5e61a5', '#595ca0'],
        'nke_light_magenta': ['#f58eb5', '#f089b0', '#eb84ab', '#e67fa6', '#e17aa1', '#dc759c', '#d77097', '#d26b92', '#cd668d', '#c86188', '#c35c83', '#be577e', '#b95279', '#b44d74', '#af486f', '#aa436a', '#a53e65', '#a03960', '#9b345b', '#962f56', '#912a51'],
        'nke_light_brown': ['#f7cea6', '#f2c9a1', '#edc49c', '#e8bf97', '#e3ba92', '#deb58d', '#d9b088', '#d4ab83', '#cfa67e', '#caa179', '#c59c74', '#c0976f', '#bb926a', '#b68d65', '#b18860', '#ac835b', '#a77e56', '#a27951', '#9d744c', '#986f47', '#936a42'],
        'nke_darker_blue': ['#5b81bd', '#567cb8', '#5177b3', '#4c72ae', '#476da9', '#4268a4', '#3d639f', '#385e9a', '#335995', '#2e5490', '#294f8b', '#244a86', '#1f4581', '#1a407c', '#153b77', '#103672', '#b316d0', '#62c680', '#127630', '#0225e0', '#01d590'],
        'nke_darker_vermillion': ['#c16182', '#bc5c7d', '#b75778', '#b25273', '#ad4d6e', '#a84869', '#a34364', '#9e3e5f', '#99395a', '#943455', '#8f2f50', '#8a2a4b', '#852546', '#802041', '#7b1b3c', '#761637', '#711132', '#6cc2d0', '#677280', '#622230', '#5d01e0'],
        'nke_darker_yellow': ['#dcc447', '#d7bf42', '#d2ba3d', '#cdb538', '#c8b033', '#c3ab2e', '#bea629', '#b9a124', '#b49c1f', '#af971a', '#aa9215', '#a58d10', '#a088b0', '#9b8360', '#967e10', '#917900', '#8c7400', '#876f00', '#826a00', '#7d6500', '#786000'],
        'nke_darker_purple': ['#924da0', '#8d489b', '#884396', '#833e91', '#7e398c', '#793487', '#742f82', '#6f2a7d', '#6a2578', '#652073', '#601b6e', '#5b1669', '#561164', '#51c5f0', '#4c75a0', '#472550', '#420500', '#3d04b0', '#380460', '#330410', '#2e03c0'],
        'nke_darker_green': ['#43a971', '#3ea46c', '#399f67', '#349a62', '#2f955d', '#2a9058', '#258b53', '#20864e', '#1b8149', '#167c44', '#11773f', '#c723a0', '#76d350', '#268300', '#0632b0', '#05e260', '#059210', '#0541c0', '#04f170', '#04a120', '#045d00'],
        'nke_darker_gold': ['#d19a32', '#cc952d', '#c79028', '#c28b23', '#bd861e', '#b88119', '#b37c14', '#ae77f0', '#a972a0', '#a46d50', '#9f6800', '#9a6300', '#955e00', '#905900', '#8b5400', '#864f00', '#814a00', '#7c4500', '#774000', '#723b00', '#6d3600'],
        'nke_darker_teal': ['#48a4a8', '#439fa3', '#3e9a9e', '#399599', '#349094', '#2f8b8f', '#2a868a', '#258185', '#207c80', '#1b777b', '#167276', '#116d71', '#c686c0', '#763670', '#25e620', '#0595d0', '#054580', '#04f530', '#04a4e0', '#045490', '#040440'],
        'nke_darker_red': ['#ca4f52', '#c54a4d', '#c04548', '#bb4043', '#b63b3e', '#b13639', '#ac3134', '#a72c2f', '#a2272a', '#9d2225', '#981d20', '#93181b', '#8e1316', '#89e110', '#849c00', '#7f4700', '#7a0200', '#750000', '#700000', '#6b0000', '#660000'],
        'nke_darker_chartreuse': ['#d9dc77', '#d4d772', '#cfd26d', '#cacd68', '#c5c863', '#c0c35e', '#bbbe59', '#b6b954', '#b1b44f', '#acaf4a', '#a7aa45', '#a2a540', '#9da03b', '#989b36', '#939631', '#8e912c', '#898c27', '#848722', '#7f821d', '#7a7d18', '#757813'],
        'nke_darker_lavendar': ['#d599dd', '#d094d8', '#cb8fd3', '#c68ace', '#c185c9', '#bc80c4', '#b77bbf', '#b276ba', '#ad71b5', '#a86cb0', '#a367ab', '#9e62a6', '#995da1', '#94589c', '#8f5397', '#8a4e92', '#85498d', '#804488', '#7b3f83', '#763a7e', '#713579'],
        'nke_darker_lime': ['#82b858', '#7db353', '#78ae4e', '#73a949', '#6ea444', '#699f3f', '#649a3a', '#5f9535', '#5a9030', '#558b2b', '#508626', '#4b8121', '#467c1c', '#417717', '#3c7212', '#376dd0', '#326880', '#2d6330', '#285e00', '#235900', '#1e5400'],
        'nke_darker_orange': ['#e8b586', '#e3b081', '#deab7c', '#d9a677', '#d4a172', '#cf9c6d', '#ca9768', '#c59263', '#c08d5e', '#bb8859', '#b68354', '#b17e4f', '#ac794a', '#a77445', '#a26f40', '#9d6a3b', '#986536', '#936031', '#8e5b2c', '#895627', '#845122'],
        'nke_darker_indigo': ['#7275b9', '#6d70b4', '#686baf', '#6366aa', '#5e61a5', '#595ca0', '#54579b', '#4f5296', '#4a4d91', '#45488c', '#404387', '#3b3e82', '#36397d', '#313478', '#2c2f73', '#272a6e', '#222569', '#1d2064', '#181b5f', '#13165a', '#e11550'],
        'nke_darker_magenta': ['#aa436a', '#a53e65', '#a03960', '#9b345b', '#962f56', '#912a51', '#8c254c', '#872047', '#821b42', '#7d163d', '#781138', '#73c330', '#6e72e0', '#692290', '#640240', '#5f01f0', '#5a01a0', '#550150', '#500100', '#4b0b00', '#460600'],
        'nke_darker_brown': ['#ac835b', '#a77e56', '#a27951', '#9d744c', '#986f47', '#936a42', '#8e653d', '#896038', '#845b33', '#7f562e', '#7a5129', '#754c24', '#70471f', '#6b421a', '#663d15', '#613810', '#5c33b0', '#572e60', '#522910', '#4d2400', '#481f00']
    });

    function ColorMap(min, max, palette, steps) {
      this.min = min;
      this.max = max;
      this.palette = palette != null ? palette : 'hot and cold';
      this.steps = steps != null ? steps : 40;
      this.range = this.max - this.min;
      this.colors = this.setColors(ColorMap.PALETTES[this.palette]);
    }

    ColorMap.prototype.map = function(data) {
      var i, res, _j, _ref;
      res = [];
      for (i = _j = 0, _ref = data.length; 0 <= _ref ? _j < _ref : _j > _ref; i = 0 <= _ref ? ++_j : --_j) {
        res[i] = data[i].map((function(_this) {
          return function(v) {
            return _this.colors[Math.floor(((v - _this.min) / _this.range) * _this.steps)];
          };
        })(this));
      }
      return res;
    };

    ColorMap.prototype.setColors = function(colors) {
      var i, rainbow, _j, _ref;
      rainbow = new Rainbow();
      rainbow.setNumberRange(1, this.steps);
      rainbow.setSpectrum.apply(null, colors);
      colors = [];
      for (i = _j = 1, _ref = this.steps; 1 <= _ref ? _j < _ref : _j > _ref; i = 1 <= _ref ? ++_j : --_j) {
        colors.push(rainbow.colourAt(i));
      }
      return colors.map(function(c) {
        return "#" + c;
      });
    };

    return ColorMap;

  })();

  Component = (function() {
    function Component(container, name, element) {
      this.container = container;
      this.name = name;
      this.element = element;
      $(this.element).change((function(_this) {
        return function(e) {
          return _this.container.settingsChanged();
        };
      })(this));
    }

    Component.prototype.getValue = function() {
      return $(this.element).val();
    };

    Component.prototype.setValue = function(value) {
      return $(this.element).val(value);
    };

    Component.prototype.setEnabled = function(status) {
      status = status ? '' : 'disabled';
      return $(this.element).attr('disabled', status);
    };

    return Component;

  })();

  SliderComponent = (function(_super) {
    __extends(SliderComponent, _super);

    function SliderComponent(container, name, element, orientation, min, max, value, step) {
      this.container = container;
      this.name = name;
      this.element = element;
      this.orientation = orientation;
      this.min = min;
      this.max = max;
      this.value = value;
      this.step = step;
      this.change = __bind(this.change, this);
      this.range = this.name.match(/threshold/g) ? 'max' : this.name.match(/nav/g) ? false : 'min';
      this._jQueryInit();
    }

    SliderComponent.prototype.change = function(e, ui) {
      if (this.name.match(/nav/g)) {
        this.container.navSlideChange(ui.value);
      } else {
        this.container.settingsChanged(e);
      }
      return e.stopPropagation();
    };

    SliderComponent.prototype._jQueryInit = function() {
      return $(this.element).slider({
        orientation: this.orientation,
        range: this.range,
        min: this.min,
        max: this.max,
        step: this.step,
        slide: this.change,
        value: this.value
      });
    };

    SliderComponent.prototype.getValue = function() {
      return $(this.element).slider('value');
    };

    SliderComponent.prototype.setValue = function(value) {
      $(this.element).slider('value', value);
      if (this.textField != null) {
        return this.textField.setValue(value);
      }
    };

    SliderComponent.prototype.setRange = function(min, max) {
      this.min = min;
      this.max = max;
      return $(this.element).slider('option', {
        min: min,
        max: max
      });
    };

    SliderComponent.prototype.attachTextField = function(textField) {
      this.textField = textField;
    };

    return SliderComponent;

  })(Component);

  SelectComponent = (function(_super) {
    __extends(SelectComponent, _super);

    function SelectComponent(container, name, element, options) {
      var o, _i, _len;
      this.container = container;
      this.name = name;
      this.element = element;
      $(this.element).empty();
      for (_i = 0, _len = options.length; _i < _len; _i++) {
        o = options[_i];
        $(this.element).append($('<option></option>').text(o).val(o));
      }
      SelectComponent.__super__.constructor.call(this, this.container, this.name, this.element);
    }

    return SelectComponent;

  })(Component);

  TextFieldComponent = (function(_super) {
    __extends(TextFieldComponent, _super);

    function TextFieldComponent(container, name, element, slider) {
      this.container = container;
      this.name = name;
      this.element = element;
      this.slider = slider != null ? slider : null;
      if (this.slider != null) {
        this.setValue(this.slider.getValue());
        $(this.element).change((function(_this) {
          return function(e) {
            var v;
            v = _this.getValue();
            if ($.isNumeric(v)) {
              if (v < _this.slider.min) {
                v = _this.slider.min;
              } else if (v > _this.slider.max) {
                v = _this.slider.max;
              }
              _this.setValue(v);
              _this.slider.setValue(v);
              return _this.container.settingsChanged(e);
            }
          };
        })(this));
        $(this.slider.element).on('slide', (function(_this) {
          return function(e) {
            _this.setValue(_this.slider.getValue());
            return e.stopPropagation();
          };
        })(this));
      }
    }

    TextFieldComponent.prototype.setValue = function(value) {
      $(this.element).val(value);
      return $(this.element).text(value);
    };

    return TextFieldComponent;

  })(Component);

  DataField = (function() {
    function DataField(panel, name, element) {
      this.panel = panel;
      this.name = name;
      this.element = element;
    }

    return DataField;

  })();

  componentToHex = function(c) {
    var hex;
    hex = c.toString(16);
    if (hex.length === 1) {
      return "0" + hex;
    } else {
      return hex;
    }
  };

  rgbToHex = function(r, g, b) {
    return "#" + componentToHex(r) + componentToHex(g) + componentToHex(b);
  };

  hexToRgb = function(hex) {
    var result;
    result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
    if (result) {
      return {
        r: parseInt(result[1], 16),
        g: parseInt(result[2], 16),
        b: parseInt(result[3], 16)
      };
    } else {
      return null;
    }
  };

}).call(this);